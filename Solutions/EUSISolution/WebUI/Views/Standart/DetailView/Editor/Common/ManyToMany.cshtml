@using Base.UI.ViewModal
@model EditorViewModel


@{
    var config = Model.ViewModelConfig;
    string htmlFieldName = Model.PropertyName;

   // string wrapID = "wrap_" + Guid.NewGuid().ToString("N");
    string multiSelectID = "ms_" + Guid.NewGuid().ToString("N");
    string placeholder = "Выберите значение...";


    string lookupProperty = config.LookupPropertyForUI;

    string validationmsg = "v_" + Guid.NewGuid().ToString("N");

    string itemTpl = null;
    string tagTpl = null;

    if (config.LookupProperty.Image != null)
    {
        itemTpl = string.Format("<span class='data-item' id='#= data.ID #' data-uid='#= uid #'><img class='img-circle data-item__img' src=\"#= pbaAPI.imageHelpers.getImageThumbnailSrc(data.{0}, 'XXS') #\" alt=\"\" /><span class='data-item__text'>#= data.{1} #</span>", config.LookupProperty.Image, config.LookupProperty.Text);
        tagTpl = string.Format("<span class='data-item' id='#= data.ID #' data-uid='#= uid #'><img class='img-circle data-item__img' src=\"#= pbaAPI.imageHelpers.getImageThumbnailSrc(data.{0}, 'XXS') #\" alt=\"\" /><span class='data-item__text'>#= data.{1} #</span>", config.LookupProperty.Image, config.LookupProperty.Text);
    }
    //if (typeof(Base.Security.User).IsAssignableFrom(Model.EditorType))
    //{
    //    itemTpl = "<span class='data-item' id='#= data.ID #' data-uid='#= uid #'>#= pbaAPI.getUserStr(data, false) #</span>";
    //    tagTpl = "<span class='data-item' id='#= data.ID #' data-uid='#= uid #'>#= pbaAPI.getUserStr(data, false, 24, 24) #</span>";
    //}
    //else if (typeof(Base.Contact.Entities.BaseContact).IsAssignableFrom(Model.EditorType))
    //{
    //    itemTpl = "<span class='data-item' id='#= data.ID #' data-uid='#= uid #'>#= pbaAPI.getContactStr(data, false) #</span>";
    //    tagTpl = "<span class='data-item' id='#= data.ID #' data-uid='#= uid #'>#= pbaAPI.getContactStr(data, false, 24, 24) #</span>";
    //}
    else
    {
        itemTpl = string.Format("<span class='data-item' id='#= data.ID #' data-uid='#= uid #'>#= data.{0} #</span>", Model.ViewModelConfig.LookupPropertyForUI);
        tagTpl = string.Format("<span class='data-item' id='#= data.ID #' data-uid='#= uid #'>#= data.{0} #</span>", Model.ViewModelConfig.LookupPropertyForUI);
    }


    string ListViewTitle = "";
    if (!string.IsNullOrEmpty(Model.ViewModelConfig?.DetailView?.Title))
    {
        ListViewTitle = Model.ViewModelConfig.DetailView.Title;
    }
    else
    {
        ListViewTitle = Model.Title;
    }
}

<script>
    window['@Model.UID'] = {
        getMultiselect: function () {
            return $("#@Model.UID").find("#@multiSelectID").data("kendoMultiSelect");
        },
        onAdditionalData: function () {
            var multiselect = $("#@Model.UID").find("#@multiSelectID").data("kendoMultiSelect");

            var val = multiselect.input.val();

            if (val == "@placeholder") val = "";

            var ids;

            var form = $("#@Model.UID").closest("form").data("pbaForm");

            var value = form.getPr("@htmlFieldName");

            if (value) {
                ids = pbaAPI.extract(value, "ID").join(";");
            }

            return {
                startswith: val,
                ids: ids
            };
        },

        openDialog: function () {
            pbaAPI.openModalDialog("@config.Mnemonic",
                function (res) {
                    application.viewModelConfigs.get("@config.Mnemonic").done(
                        function (config) {
                            var $form = $("#@Model.UID").closest("form");
                            var form = $form.data("pbaForm");
                            var pr = "@htmlFieldName";

                            var multiselect = window['@Model.UID'].getMultiselect();

                            if (!form.getPr(pr)) {
                                form.setPr(pr, []);
                            }

                            var prdata = form.getPr(pr);

                            var ids = pbaAPI.extract(prdata, "ID");

                            for (var i = 0; i < res.length; i++) {
                                if ($.inArray(res[i].ID, ids) === -1) {
                                    var dest = pbaAPI.toObj(config, res[i]);
                                    prdata.push(dest);
                                    multiselect.dataSource.pushCreate(dest);
                                }
                            }

                            window['@Model.UID'].syncValue(false);
                        });
                },
                {
                    title: "ВЫБОР - @ListViewTitle",
                    multiselect: true
                });
        },
        syncValue: function (load) {
            var multiselect = window['@Model.UID'].getMultiselect();
            multiselect.dataSource.filter({});
        },
        onDataBound: function () {
            var form = $("#@Model.UID").closest("form").data("pbaForm");
            var pr = "@htmlFieldName";
            var prdata = form.getPr(pr);
            var multiselect = window['@Model.UID'].getMultiselect(); 
            multiselect.value(pbaAPI.extract(prdata, "ID"));            
        },
        clear: function () {
            var e_form = $("#@Model.UID").closest("form");
            var form = e_form.data("pbaForm");

            $("#@Model.UID").find("#@multiSelectID").data("kendoMultiSelect").value([]);

            form.setPr("@htmlFieldName", []);
        },
        onSelect: function (e) {
            var e_form = $("#@Model.UID").closest("form");
            var form = e_form.data("pbaForm");
            var pr = "@htmlFieldName";

            var multiselect = $("#@Model.UID").find("#@multiSelectID").data("kendoMultiSelect");

            if (!form.getPr(pr)) {
                form.setPr(pr, []);
            }

            var prdata = form.getPr(pr);

            var uid = e.item.find(".data-item").attr("data-uid");

            var obj = multiselect.dataSource.getByUid(uid);

            prdata.push({ ID: obj.ID });
        },
        onChange: function (e) {
            var e_form = $("#@Model.UID").closest("form");
            var form = e_form.data("pbaForm");
            var pr = "@htmlFieldName";

            if (!form.getPr(pr)) {
                form.setPr(pr, []);
            }

            var prdata = form.getPr(pr);
            var r_prdata = [];

            var multiselect = $("#@Model.UID").find("#@multiSelectID").data("kendoMultiSelect");

            multiselect.tagList.find("span.data-item").each(function () {
                r_prdata.push(parseInt($(this).attr("id")));
            });

            var deleteids = [];

            for (var i = 0; i < prdata.length; i++) {
                if (r_prdata.indexOf(prdata[i].ID) < 0) {
                    deleteids.push(prdata[i].ID);
                }
            }

            for (var i = 0; i < deleteids.length; i++) {
                for (var j = 0; j < prdata.length; j++) {
                    if (prdata[j].ID == deleteids[i]) {
                        prdata.splice(j, 1);
                    }
                }
            }
        }
    };
</script>

<div id="@Model.UID" class="input-group">
    <div class="form-control">
        @(Html.Kendo().MultiSelect()
          .Name(multiSelectID)
          .DataValueField("ID")
          .DataTextField(lookupProperty)
          .Filter("startswith")
          .Placeholder(placeholder)
          .AutoBind(false)
          .ItemTemplate(itemTpl)
          .TagTemplate(tagTpl)
          .Events(e => e.Select(Model.UID + ".onSelect").Change(Model.UID + ".onChange").DataBound(Model.UID + ".onDataBound"))
          .DataSource(source =>
          {
              source.Read(read =>
              {
                  //read.Url($"/api/listview/{Model.Mnemonic}/filter/boProperty").Data(Model.UID + ".onAdditionalData");
                  read.Url($"/api/listview/{config.Mnemonic}/filter/boProperty").Data(Model.UID + ".onAdditionalData");
              })
              .ServerFiltering(true);
          })
        )
    </div>
    <span class="input-group-btn">
        <a href="#" onclick="window['@Model.UID'].openDialog(); return false;" title="Выбрать"><i class="fa fa-navicon"></i></a>
        <a href="#" onclick="window['@Model.UID'].clear(); return false;" title="Очистить"><i class="fa fa-close"></i></a>
    </span>
</div>

<input id="@validationmsg" name="@validationmsg" type="hidden" @(Model.IsRequired ? "required" : "") validationmessage="Выберите значение" value="" />
<span class="k-invalid-msg" data-for="@validationmsg"></span>

<script>
    $(function () {
        var $form = $("#@Model.UID").closest("form");

        $form.on("onAfterBind", function (e, form) {            
            var val = form.getPr("@htmlFieldName");            
            if (val && val.length > 0)
                $("#@validationmsg").val("val");
            else
                $("#@validationmsg").val("");

            var multiselect = window['@Model.UID'].getMultiselect(); 
            multiselect.value(pbaAPI.extract(val, "ID")); 
        });

        $form.on("onSave", function (e, form) {
            var val = form.getPr("@htmlFieldName");

            if (val && val.length > 0)
                $("#@validationmsg").val("val");
            else
                $("#@validationmsg").val("");
        });
    });
</script>