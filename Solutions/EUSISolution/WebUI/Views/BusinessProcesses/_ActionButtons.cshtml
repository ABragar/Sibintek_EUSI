@using Base.BusinessProcesses.Services.Concrete
@using WebUI.Models.BusinessProcess
@using ImageSize = Base.UI.Enums.ImageSize
@model IEnumerable<StageVM>

@if (!Model.Any(IsCurrentUserParticipant))
{
    return;
}

@{
    string dropdownId = Html.CreateSystemName("actions");
}



<a href="#" class="k-button primary" data-dropdown="#@dropdownId" data-popup="bottom">Действия</a>

<div class="popup-content" id="@dropdownId">
    <ul class="kwidget kwidget--list">
        @foreach (StageVM stageVm in Model)
        {
            if (IsCurrentUserParticipant(stageVm))
            {
                string stageId = Html.CreateSystemName("stage");

                <li id="@stageId">
                    @RenderCurrentParticipantStage(stageVm, stageId)
                    @RenderCurrentParticipantStageScript(stageVm, stageId)
                </li>
            }
        }
    </ul>
</div>

@*<div class="btn-group">
        @if (Model.Any(IsCurrentUserParticipant))
        {
            var triggerID = "toggle_" + Guid.NewGuid().ToString("N");
            var dropID = "dropdown_" + Guid.NewGuid().ToString("N");

            <button type="button" id="@triggerID" class="btn btn-success"><i class="fa fa-bolt"></i>&nbsp;Действия&nbsp;<i class="fa fa-caret-down"></i></button>
            <ul id="@dropID" class="action-dropdown">

                @foreach (StageVM stageVm in Model)
                {
                    if (IsCurrentUserParticipant(stageVm))
                    {
                        var stageID = "stage_" + Guid.NewGuid().ToString("N");

                        <li id="@stageID">
                            @RenderCurrentParticipantStage(stageVm, stageID)
                            @RenderCurrentParticipantStageScript(stageVm, stageID)
                        </li>
                    }
                }

            </ul>

            <script>
                $(function () {
                    $("#@triggerID").pbaDropdown({
                        delay: 100,
                        minWidth: 180,
                        maxWidth: 350,
                        selector: "#@dropID",
                        trigger: "click",
                        zIndex: 99999
                    });
                });
            </script>
        }

    </div>*@

@helper RenderCurrentParticipantStage(StageVM stageVm, string selector)
{
    <div class="bpaction-dropdown__item">
        <div class="action-dropdown__header text-center clearfix">
            <h5 class="stage-name" title="@stageVm.Name">@stageVm.Name.Truncate(60)</h5>
            @if (stageVm.FromUser != null && stageVm.Performer != null)
            {
                @: @RenderStageExecutionActions(stageVm)
            }
            else
            {
                if (@stageVm.PerformerType == PerformerType.Admin || stageVm.PerformerType == PerformerType.Curator)
                {
                    <button id="force-perform" title="Назначить исполнителя" type="button" class="k-button error">
                        <i class="mdi mdi-hand-pointing-right"></i>
                    </button>
                }
                <button id="take-for-perform" title="Взять на исполнение" type="button" class="k-button primary">
                    <i class="mdi mdi-play"></i>
                </button>
            }
        </div>
        <div class="action-dropdown__body">
            <hr>

            @foreach (var action in stageVm.Actions)
            {
                <button class="k-button button-block"
                        title="@action.Description"
                        data-wfaction="@action.ID"
                        data-wfclosedv="@action.CloseDV.ToString().ToLower()"
                        data-wfshowcomment="@action.ShowComment.ToString().ToLower()"
                        data-wfrequiredcomment="@action.RequiredComment.ToString().ToLower()"
                        data-allowloadfile="@action.AllowLoadFile.ToString().ToLower()"
                        style="color: #FFF; background-color: @(action.Color);">
                    @action.Title
                </button>
            }


        </div>
    </div>
}

@helper RenderCurrentParticipantStageScript(StageVM stageVm, string selector)
{
    <script>
        (function () {
            var $container = $("#@selector");
            var $toolbar = $container.closest("[data-role=\"toolbar\"]");
            var ajaxParams = {
                objectID: parseInt("@stageVm.ObjectID"),
                objectType: "@stageVm.ObjectType",
                stageID: parseInt("@stageVm.StageID"),
                performID: parseInt("@stageVm.StagePerformID")
            };

            $(".k-i-close").click(function () {
                $(".tooltipster-show").remove();
            });

            var invokeAction = function (data) {               
                if (data.error) {
                    return pbaAPI.errorMsg(data.message);
                }
                
                $toolbar.trigger("onActionInvoke");
            };


            $container.find("#take-for-perform").click(function () {
                $.get("/businessprocesses/takeforperform", ajaxParams, invokeAction);
            });

            $container.find("#release-perform").click(function () {
                $.get("/businessprocesses/releaseperform", ajaxParams, invokeAction);
            });

            $container.find("#force-perform").click(function () {

                $.get("/businessprocesses/CanSelectPerformer", ajaxParams, function (data) {
                    if (data === false) {
                        return pbaAPI.errorMsg("К сожалению для данного этапа не могут быть назначены исполнители, " +
                            "обратитесь к администратору данного бизнес-процесса");
                    }



                    var kendoWindow = $("<div>").kendoWindow({
                        width: 600,
                        height: 600,
                        title: "Выберите исполнителя",
                        actions: ["Maximize", "Close"],
                        modal: true,
                        content: {
                            url: "@Url.Action("UsersList", "BusinessProcesses")",
                            data: ajaxParams
                        },
                        activate: function () {
                            kendoWindow.trigger('onActivate');
                        },
                        deactivate: function () {
                            this.destroy();
                        },
                        resize: function () {
                            kendoWindow.trigger('onResize');
                        },
                        close: function () {
                            if (this.user) {
                                $.get("/businessprocesses/takeforperform", $.extend({ userID: this.user.ID }, ajaxParams), invokeAction);
                            }
                        }
                    });

                    kendoWindow.data("kendoWindow").center().open();
                });
            });
        }());
    </script>
}

@helper RenderStageExecutionActions(StageVM stageVm)
{
string toID = "thumb_" + Guid.NewGuid().ToString("N");
string fromID = "thumb_" + Guid.NewGuid().ToString("N");
bool assignedByYourself = stageVm.FromUser.ID == stageVm.Performer.ID;
bool canRelease = stageVm.PerformerType == PerformerType.Admin ||
                  stageVm.PerformerType == PerformerType.Curator ||
                  stageVm.PerformerType == PerformerType.Performer && assignedByYourself;

if (!assignedByYourself)
{
        <button type="button" class="k-button k-state-disabled">
            <i class="mdi mdi-hand-pointing-right"></i>
        </button>
            <button id="@fromID" type="button" class="k-button">
                <img data-mnemonic="User" data-id="@stageVm.FromUser.ID" src="@Html.GetImageThumbnailSrc(stageVm.FromUser.Image, ImageSize.XXS, "NoPhoto")" alt="" width="20" height="20" />
            </button>
}

    <button id="@toID" type="button" class="k-button">
        <img data-mnemonic="User" data-id="@stageVm.Performer.ID" src="@Html.GetImageThumbnailSrc(stageVm.Performer.Image, ImageSize.XXS, "NoPhoto")" alt="" width="20" height="20" />
    </button>

if (canRelease)
{
        <button id="release-perform" title="Снять с исполнения" type="button" class="k-button">
            <i class="mdi mdi-stop"></i>
        </button>
}
}

@functions {
    bool IsCurrentUserParticipant(StageVM stageVM)
    {
        bool result = false;

        if (stageVM.PerformerType == PerformerType.Admin || stageVM.PerformerType == PerformerType.Curator || stageVM.PerformerType == PerformerType.Performer)
        {
            result = true;
        }
        else if (stageVM.PerformerType == PerformerType.Regular)
        {
            result = stageVM.PermittedUsers.Any(x => x.ID == stageVM.CurrentUser.ID) || stageVM.Performer.ID == stageVM.CurrentUser.ID;
        }

        return result;
    }
}