@model StandartDialogViewModel
@using Base.UI.ViewModal
@using Newtonsoft.Json

@{
    var isCreate = Model.IsPermission(TypePermission.Create);
    var firstStep = ((WizardDetailView)Model.ViewModelConfig.DetailView).FirstStep;
    var wizardFormModel = new WizardFormModel(Model, Html.GetCommonEditor(Model.Mnemonic));
}

@if (isCreate)
{
    <script>
        window["@Model.DialogID"] = new CompositeControl("@Model.DialogID");

        (function () {
            var composite = window["@Model.DialogID"];

            composite.mnemonic = "@Model.Mnemonic";
            composite.type = "@Model.Type";
            composite.firststep = "@firstStep";
            composite.completekey = "@WizardConfig.WIZARD_COMPLETE_KEY";
            composite.isModal = composite.type === "Modal";
            composite.changeObjects = [];

            composite.defparams = {
                // kendoWindow - окно диалога
                wnd: null,
                // ID текущего объекта
                currentID: 0,
                // ассоциативный массив - / key = ID; value = { model: entity, access: { Update: bool, Delete: bool }, order: №, loaded: bool } /
                // pbaForm - ссылка на родительскую форму
                parentForm: null,
                // флаг - только чтение
                isReadOnly: false,
                // флаг - выполнить запрос сохранения объекта
                toSave: false,
                // флаг - скрыть toolbar
                hideToolbar: true,
                // события
                events: {
                    initNewEntity: function (e) { },
                    nextStep: function (e) {

                    },
                    onNextStep: function (e) {

                    },
                    beforeSave: function (e) { },
                    save: function (e) { },
                }
            };

            composite.params = {};

            composite.initDialog = function (params) {

                composite.curModel = {};

                var defparams = $.extend({}, this.defparams);

                this.params = $.extend(defparams, params);
                if (this.defparams.isReadOnly)
                    this.params.isReadOnly = true;

                this.changeObjects = [];

                if (this.params.hideToolbar || composite.defparams.hideToolbar) {
                    this.element().find(".toolbar-vm").hide();
                }

                this.bind();
            };

            composite.destroy = function () {
                this.changeObjects = [];
            };

            composite.criticalError = function (msg) {
                this.hideLoading();
                this.element().html("<h4 style='color: red;'>" + msg + "</h4>");
            };

            composite.startLoading = function () {
                var $content;

                if (this.isModal)
                    $content = this.params.wnd.element;
                else
                    $content = this.element().closest("div");

                $content.addClass("wnd-loading-content");

                this.element().hide();
            };

            composite.hideLoading = function () {
                var $content;

                if (composite.isModal)
                    $content = this.params.wnd.element;
                else
                    $content = this.element().closest("div");

                $content.removeClass("wnd-loading-content");

                composite.element().fadeIn(300);

                var editors = composite.widgets;

                $.each(editors, function (index, value) {
                    if (value) {
                        var $el = value.element();

                        if ($el.is(":visible"))
                            $el.trigger('onShown', value.widget());
                    }
                });
            };

            composite.bind = function () {
                this.startLoading();

                this.getModel(function (entity) {
                    composite.model = entity.model;

                    var dfds = [];

                    for (var id in composite.widgets) {
                        if (composite.widgets.hasOwnProperty(id)) {
                            var widget = composite.widgets[id];

                            if (widget.defparams.step === composite.model.Step) {
                                $("#" + widget.id).show();

                                if (widget.asyncBind) {
                                    dfds.push(widget.asyncBind({
                                        isReadOnly: !composite.getAccess(entity).Update,
                                        parentForm: composite.params.parentForm,
                                        model: composite.model,
                                        toSave: composite.params.toSave
                                    }));
                                }

                            } else {
                                $("#" + widget.id).hide();
                            }
                        }
                    }

                    $.when.apply($, dfds).done(function () {
                        composite.hideLoading();
                    });
                });
            };

            composite.getAccess = function (obj) {
                if (this.params.isReadOnly) {
                    return { Update: false, Delete: false };
                }
                else {
                    return obj.access || { Update: true, Delete: true };
                }
            };

            composite.curModel = {};

            composite.getModel = function (callback) {
                var curModel = composite.curModel;
                if (curModel.hasOwnProperty("model")) {
                    callback(curModel);
                    return;
                }                

                pbaAPI.proxyclient.wizard.get_instance({ wizard: this.mnemonic })
                    .done(function (res) {

                        if (composite.params.events.initNewEntity) {
                            composite.params.events.initNewEntity(res.model);
                        }

                        var entity = res.model;

                        pbaAPI.proxyclient.wizard.start({ wizard: composite.mnemonic }, entity)
                            .done(function (finalres) {

                                if (finalres && finalres.error) {
                                    pbaAPI.errorMsg(finalres.message);
                                    return;
                                }

                                var oldEntity = composite.curModel;
                                oldEntity.model = finalres.model;
                                oldEntity.access = finalres.access;
                                oldEntity.loaded = true;
                                callback(oldEntity);
                            });
                    });

            };


            composite.onChildWidgetChanged = function (e) {
                if (e.sender.desc === "WizardViewModel") {
                    switch (e.event) {
                        case "prev":
                            composite.prev(e);
                            break;
                        case "next":
                            composite.next(e);
                            break;
                        case "close":
                            composite.params.wnd.close();
                            break;
                        case "save":
                            $.when(composite.save(e, true)).done(function () {
                                composite.params.events.save({ sender: composite });
                            });
                            break;
                    }
                }
            };

            composite.refresh = function () {
                var entity = composite.curModel;

                if (entity.loaded) {
                    entity.model = null;
                }

                composite.bind();
            };

            composite.next = function (e) {
                var form = e.sender.widget();
                form.element.trigger("onSave", form);
                if (form.validate()) {

                    var model = form.getModel();

                    pbaAPI.proxyclient.wizard.next({ wizard: composite.mnemonic }, model)
                        .done(function (res) {
                            var entity = composite.curModel;

                            entity.model = res.model;

                            if (res.access)
                                entity.access = res.access;

                            switch (res.status.toLowerCase()) {
                                case "complete":
                                    composite.changeObjects.push(res.base);
                                    entity.model = res.base;
                                    entity.loaded = true;
                                    composite.params.events.save({ sender: composite });
                                    break;
                                case "success":
                                    //debugger;
                                    //if (res.model.PreviousSteps && res.model.StepCount) {
                                    //    if ((res.model.PreviousSteps.length === res.model.StepCount) && !res.model.HasSummary) {
                                    //        composite.save();
                                    //    }
                                    //}
                                    composite.bind();
                                    break;
                                case "error":
                                    pbaAPI.msg(res.message, "error");
                                    break;
                                default:
                                    console.log("Response:", res);
                                    break;
                            }
                        });


                } else {
                    pbaAPI.errorMsg("Заполнены не все обязательные поля!");
                }
            };

            composite.prev = function (e) {
                var form = e.sender.widget();

                var model = form.getModel();

                pbaAPI.proxyclient.wizard.prev({ wizard: composite.mnemonic }, model)
                .done(function (res) {
                    var entity = composite.curModel;

                    entity.model = res.model;

                    if (res.access)
                        entity.access = res.access;

                    composite.bind();

                });

            };

            composite.save = function (e, sync) {
                var dfd = $.Deferred();

                var form = e.sender.widget();

                form.element.trigger("onSave", form);

                var model = form.getModel();

                if (this.params.events.beforeSave) {
                    this.params.events.beforeSave({
                        isNew: model.ID === 0,
                        pbaForm: form
                    });
                }

                if (form.validate()) {

                    form.element.trigger("onAfterValidate", form);

                    //if (this.params.toSave) {

                    this.startLoading();


                    pbaAPI.proxyclient.wizard.complete({ wizard: composite.mnemonic, returnEntireModel: sync }, model)
                        .done(function (res) {
                            if (res.error === 0) {

                                composite.changeObjects.push(res.base);

                                if (!composite.isModal)
                                    pbaAPI.uploadMsg(res.message);

                                if (sync) {
                                    var entity = $.extend({}, composite.curModel);

                                    entity.model = res.base;
                                    entity.loaded = true;

                                    if (res.access)
                                        entity.access = res.access;
                                }

                                dfd.resolve();
                            } else {
                                pbaAPI.errorMsg(res.message);
                                composite.hideLoading();
                            }
                        });
                    //} else {
                    //    composite.changeObjects.push(model);
                    //    dfd.resolve();
                    //}
                } else {
                    pbaAPI.errorMsg("Заполнены не все обязательные поля!");
                }

                return dfd.promise();
            };

        })();
    </script>
}
else
{
    <script>
        window["@Model.DialogID"] = new CompositeControl("@Model.DialogID");

        (function () {
            var composite = window["@Model.DialogID"];

            composite.mnemonic = "@Model.Mnemonic";
            composite.type = "@Model.Type";
            composite.isModal = composite.type === "Modal";
            composite.changeObjects = [];

            composite.initDialog = function (params) {
                composite.hideLoading(params);
            };

            composite.hideLoading = function (params) {
                var $content;

                if (this.isModal)
                    $content = params.wnd.element;
                else
                    $content = this.element().closest("div");

                $content.removeClass("wnd-loading-content");

                this.element().fadeIn(300);
            };

            composite.destroy = function () {
                this.changeObjects = [];
            };

        })();
    </script>
}

<div id="@Model.DialogID" style="display:none; height: 100%;">
    @Html.HiddenFor(m => m.DialogID)

    @if (isCreate)
    {
        foreach (var step in wizardFormModel.Steps)
        {
            Html.RenderPartial("_BuilderStepViewModel", new StepViewModel(wizardFormModel, step));
        }
    }
    else
    {
        <div class="lock" style="min-height:200px;"><h2>НЕТ ДОСТУПА</h2></div>
    }
</div>

<script>
    $(function () {
        var dialog = window["@Model.DialogID"];
        $("#@Model.DialogID").data("dialogVM", dialog);
    });
</script>