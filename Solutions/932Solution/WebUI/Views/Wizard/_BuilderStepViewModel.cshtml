@model StepViewModel

@{
    const string detailView = "Wizard";
}

<script>
    window["@Model.WidgetID"] = new WrapViewModel("@Model.WidgetID", "WizardViewModel", "@Model.Type");

    (function () {
        var composite = window["@Model.DialogID"];

        var view = window["@Model.WidgetID"];

        composite.registerWidget(view);

        view.defparams = {
            model: null,
            parentForm: null,
            isReadOnly: false,
            toSave: false,
            step: "@Model.StepName",
            stepCount: @Model.StepCount,
        };

        view.params = {};

        view.asyncBind = function (params) {
            this.params = $.extend(this.defparams, params);

            if (!this.params.isReadOnly) {
                $("#@Model.WidgetID").show();
                return view.initViewModel();
            } else {
                var dfd = $.Deferred();

                $("#@Model.WidgetID").hide();

                dfd.resolve();

                return dfd.promise();
            }
        };

        view.toolbar = {
            prev: function() {
                composite.onWidgetChanged({
                    sender: view,
                    event: "prev",
                    params: {}
                });
            },
            next: function() {
                composite.onWidgetChanged({
                    sender: view,
                    event: "next",
                    params: {}
                });
            },
            save: function() {
                view.save("save");
            }
        };

        view.initViewModel = function () {
            var viewModel = kendo.observable({
                model: this.params.model,
                apply: function () {
                    view.save("apply");
                },
                save: function () {
                    view.save("save");
                },
                next: function() {
                    view.toolbar.next();
                },
                prev: function() {
                    view.toolbar.prev();
                },
                close: function () {
                    composite.onWidgetChanged(
                    {
                        sender: view,
                        event: "close",
                        params: {}
                    });
                },
                completeObject: function() {
                    composite.onWidgetChanged(
                    {
                        sender: view,
                        event: "save",
                        params: {}
                    });
                }

            });

            return view.initPbaForm(viewModel);
        };

        view.save = function (type) {
            composite.onWidgetChanged(
            {
                sender: view,
                event: type,
                params: {}
            });
        };

        //Change logic
        view.initPbaForm = function (viewModel) {
            var dfd = $.Deferred();
            var $form = $("#@Model.WidgetID").find('form');

            if (!$form.data("pbaForm")) {
                $form.pbaForm({
                    model: viewModel,
                    nameModel: "model",
                    attrBind: true,
                    validate: true
                });

                $form.data("pbaForm").parentForm = view.params.parentForm;
                $form.data("pbaForm").bind();
            } else {
                $form.data("pbaForm").unbind();
                $form.data("pbaForm").bind(viewModel);
            }

            var $dialog = $form.closest('.dialog');
            var toolbar = $dialog.data('toolbar');            
            var completeButton = $dialog.find('.complete');
            toolbar.enable(completeButton, viewModel.model.IsCompleted);

            // is IE - maximize window
            if (document.body.parentNode.className.indexOf("k-ie") >= 0) {
                var kendoWindow = $form.closest(".view-model-window").getKendoWindow();
                if (kendoWindow) kendoWindow.maximize();
            }

            dfd.resolve();

            return dfd.promise();
        };
    })();
</script>

<div id="@Model.WidgetID" style="display: none; height: 100%;">
    @{ Html.RenderPartial(Html.GetStandartDetailView("Common/" + detailView, true), Model); }
</div>
