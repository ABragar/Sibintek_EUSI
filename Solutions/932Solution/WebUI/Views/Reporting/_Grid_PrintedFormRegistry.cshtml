@model Dialog_WidgetViewModel

@{
    var grid = Model.WidgetID;
}

@{
    if (!Base.Ambient.AppContext.SecurityUser.IsAdmin)
    {
        throw new HttpException(404, "Страница не найдена");
    }
}

<div class="kwidget kwidget--grid">
    <div id="@grid"></div>
    <div id="reportviewver" style="height: 500px; width: 500px;"></div>
</div>

<script>
    (function () {
        kendoReporting.setService("@Html.GetTelerikReportingService()");

        function parseUserCategoryEasyCollectionToString(categories) {
            if (!categories || categories.length === 0)
                return "";

            var ids = categories.map(function(item) {
                return item.Object.ID;
            });

            return ids.join();
        };

        function parseStringToUserCategoryEasyCollection(categories) {
            if (!categories)
                return [];

            var ids = categories.split(",");

            var cats = [];

            ids.forEach(function(item) {
                cats.push({
                    ID: 0,
                    Object: {
                        ID: parseInt(item)
                    }
                });
            });

            return cats;
        };

        var grid = window["@grid"] = new WrapGrid({
            id: "@grid",
            mnemonic: "@Model.Mnemonic",
            isCategorizedItem: false,
            desc: "GridView"
        });

        var composite = window["@Model.DialogID"];
        composite.registerWidget(grid);

        grid.onChange = function (e) {
            grid.initCurrentRow();
            grid.onselect();
            grid.element().trigger("onChange", this);
        };

        grid.dblclick = function (btn) {
            composite.onWidgetChanged(
            {
                sender: grid,
                event: "dblclick"
            });
        };

        grid.onDataBound = function () {
            this.element.find(".k-grid-content-locked").find('span[data-bg]').each(function () {
                var $cond = $(this);
                $cond.closest('td').css('background-color', $cond.data('bg'));
            });

            this.element.find(".k-grid-content").find('span[data-bg]').each(function () {
                var $cond = $(this);
                $cond.closest('td').css('background-color', $cond.data('bg'));
            });

            this.element.find(".k-icon.k-i-collapse").click();

            composite.onWidgetChanged({
                sender: grid,
                event: "onDataBound"
            });

            grid.activeRow();

            this.element.find("tr[data-uid]").dblclick(function () {
                grid.dblclick(this);
            });

            if (grid.isSearchRequest) {
                grid.isSearchRequest = false;
            }

            $("#@Model.WidgetID").trigger("onDataBound", this);

            if (grid["__idx_select_row"]) {
                grid.select("tr:eq(" + (grid["__idx_select_row"]) + ")");
                delete grid["__idx_select_row"];
            }

            if (grid["__scroll_top"]) {
                grid.content().scrollTop(grid["__scroll_top"]);
                delete grid["__scroll_top"];
            }
        };

        grid.addRow = function() {
            pbaAPI.openDetailView("@Model.Mnemonic", {
                toSave: false,
                callback: function(e) {
                    if (e.type === "save") {
                        if (!e.model.GuidId)
                            return;

                        e.model.UserCategories = parseUserCategoryEasyCollectionToString(e.model.UserCategories);

                        kendoReporting.create(e.model, function(result) {
                            if (result.error) {
                                pbaAPI.errorMsg(result.error);
                            } else {
                                pbaAPI.uploadMsg(result.message);
                                grid.bind();
                            }
                        });
                    }
                }
            });
        };

        grid.editRow = function (id) {
            if (id == undefined)
                id = this.selectID();

            kendoReporting.get(id, function (result) {
                var cats = parseStringToUserCategoryEasyCollection(result.UserCategories);

                pbaAPI.openDetailView("@Model.Mnemonic", {
                    wid: "@Model.WidgetID",
                    toSave: false,
                    initProps: {
                        Name: result.Name,
                        ID: result.ID,
                        Extension: result.Extension,
                        GuidId: result.GuidId,
                        Description: result.Description,
                        UserCategories: cats,
                        Code: result.Code,
                        Params: result.Params,
                        RelativePath: result.RelativePath
                    },
                    callback: function(e) {
                        if (e.type === "save" || e.type === "apply") {
                            if (!e.model.ID)
                                return;

                            e.model.UserCategories = parseUserCategoryEasyCollectionToString(e.model.UserCategories);

                            kendoReporting.update(e.model, function(res) {
                                if (res.error) {
                                    pbaAPI.errorMsg(res.error);
                                } else {
                                    pbaAPI.uploadMsg(res.message);
                                    grid.bind();
                                }
                            });
                        }
                    }
                });
            });
        };

        grid.bind = function() {
            grid.dataSourceRead();
        };

        grid.deleteRow = function () {
            var id = this.selectID();

            if (id) {
                kendoReporting.delete(id, function(result) {
                    if (result.error) {
                        pbaAPI.errorMsg(result.error);
                    } else {
                        pbaAPI.uploadMsg(result.message);
                        grid.bind();
                    }
                });
            }
        };

        grid.previewReport = function () {
            var selected = grid.getSelectItems();
            
            if (selected.length === 1) {
                var obj = selected[0];
                
//                kendoReporting.preview(obj.GuidId + obj.Extension, {
//                    title: obj.Name
//                });
                var reportParams = obj.Params;
                var params = null;
                pbaAPI.proxyclient.corpProp.getUserProfile({ id: application.currentUser.id }).done(function (res) {
                    if (reportParams) {
                        params = reportParams.replace("@@currentUserId", application.currentUser.id).replace("@@currentSocietyId", res.SocietyIDEUP).replace("@@currentYear", (new Date()).getFullYear());
                    }
                    obj.Params = params;
                corpProp.reporting.showReport(obj);
                });
            }
        }

        grid.downloadReport = function () {
            var selected = grid.getSelectItems();

            if (selected.length === 1) {
                var obj = selected[0];
                kendoReporting.download(obj.ID);
            }
        }

        grid.onNeighbourWidgetChanged = function (e) {
            if (e.sender.desc === "ToolbarListView" || e.sender.desc === "ContextMenuListView") {
                if (e.event === "click") {
                    switch (e.params.action) {
                        case "add":
                            grid.addRow();
                            break;
                        case "edit":
                            grid.editRow();
                            break;
                        case "delete":
                            grid.deleteRow();
                            break;
                        case "preview":
                            grid.previewReport();
                            break;
                        case "download":
                            grid.downloadReport();
                            break;

                    }
                }
            }
        };
    })();
</script>

<script>
    $(function () {
        $("#@grid").kendoGrid({
            dataSource: {
                transport: {
                    read: function (e) {
                        kendoReporting.getGridData().done(function (result) {
                            e.success(result);
                        }).fail(function(result) {
                            e.error(result);
                        });
                        
                    }
                },
                schema: {
                    model: {
                        id: "Id",
                        GuidId: "GuidId",
                        Extension: "Extension",
                        Description: "Description",
                        Code: "Code",
                        Params: "Params"
                    }
                },
                error: function(res) {
                    pbaAPI.errorMsg("Произошла ошибка. Обратитесь к администратору.");
                    console.log("Необработанная ошибка.", res);
                }
            },
            selectable: true,
            groupable: true,
            group: [
                { field: "ReportType" }
            ],
            columns: [
                {
                    field: "ReportType",
                    title: "Тип"
                },
                {
                    field: "Name",
                    title: "Наименование"
                },
                {
                    field: "Module",
                    title: "Функциональный модуль"
                },
                {
                    field: "Description",
                    title: "Описание"
                }
            ],
            change: window["@grid"].onChange,
            dataBound: window["@grid"].onDataBound
        });
    })
</script>
