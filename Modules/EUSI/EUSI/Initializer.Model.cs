using Base;
using Base.UI;
using CorpProp.Entities.Document;
using CorpProp.Services.Base;
using System.Linq;
using Base.Attributes;
using EUSI.Entities.BSC;
using EUSI.Services.BSC;
using EUSI.Entities.Report;
using EUSI.Entities.Accounting;
using EUSI.Entities.Import;
using EUSI.Services.Accounting;
using EUSI.Services.Import;
using EUSI.Entities.Models;
using System.Collections.Generic;
using Base.UI.ViewModal;

namespace EUSI
{
    /// <summary>
    /// Представляет модель объектов EUSI.
    /// </summary>
    public static class ModelInitializer
    {      

        /// <summary>
        /// Инициализация моделей объектов приложения.
        /// </summary>
        /// <param name="context"></param>
        /// <param name="viewModelConfigService"></param>
        public static void Init(IInitializerContext context, IViewModelConfigService viewModelConfigService)
        {

            EUSI.Model.NSIModel.Init(context);
            EUSI.Model.AccountingMovingModel.Init(context);
            EUSI.Model.AccountingModel.Init(context, viewModelConfigService);
            EUSI.Model.EstateRegistrationModel.Init(context, viewModelConfigService);
            EUSI.Model.EstateModel.Init(context, viewModelConfigService);
            EUSI.Model.Import.ImportHistoryModel.CreateModelConfig(context);
            EUSI.Model.Import.ImportErrorLogModel.CreateModelConfig(context);
            EUSI.Model.NUModel.Init(context);
            EUSI.Model.ConsolidationAndReportMonitoringEventTypeModel.Init(context);


            context.CreateVmConfig<SetCommentModel>()
                .Title("Комментарий")
                .DetailView(builder => builder
                    .Title("Комментарий")
                    .Width(600)
                    .Height(240)
                    .Editors(eds => eds.Add(ed => ed.Comment, ac=>ac.IsRequired(true))));

            context.CreateVmConfig<ExportMoving>()
                .Service<IExportMovingService>()
                .Title("Выгрузка в шаблоны параллельного учета")
                .ListView(builder => builder.Title("Выгрузка в шаблоны параллельного учета"))
                .DetailView(builder => builder.Title("Выгрузка в шаблоны параллельного учета"));

            context.CreateVmConfig<ExportZip>()
                .Title("Выгрузка в шаблон БУС")
                .DetailView(builder => builder.Title("Выгрузка в шаблон БУС"));

            context.CreateVmConfig<ExportZip>("ExportZipOS")
                .Title("Экспорт данных об ОС/НМА")
                .DetailView(builder => 
                    builder
                        .Title("Экспорт данных об ОС/НМА")
                        .Editors(eds => eds
                            .Add(c => c.EndDate, ac => ac.Visible(false).IsRequired(false))
                            .Add(c => c.StartDate, ac => ac.Visible(false).IsRequired(false))
                            .Add(c => c.NotIncludeTransferBus, ac => ac.Visible(false))
                        )
                );

            context.CreateVmConfigOnBase<FileCard>(nameof(FileCard), "EstateRegistration_Files")
                   .ListView(x => x.Title("Перечень первичных документов")
                   .Columns(cols => cols.Clear()
                   .Add(c => c.FileCardDate, ac => ac.Visible(true).Order(1))
                   .Add(c => c.Number, ac => ac.Visible(true).Order(2))
                   .Add(c => c.FileCardType, ac => ac.Visible(true).Order(3))
                   .Add(c => c.Description, ac => ac.Visible(true).Order(4))
                   .Add(c => c.ListCount, ac => ac.Visible(true).Order(5))
                   ))
                   .DetailView(builder => builder.Title("Первичный документ"));



            context.CreateVmConfig<BCSData>()
                 .Service<IBSCDataService>()
                 .Title("Данные BCS")
                 .ListView(builder => builder.Title("Данные BCS"))
                 .DetailView(builder => builder.Title("Данные BCS"));

            context.CreateVmConfig<ReportMonitoring>()
                    .Service<ITypeObjectService<ReportMonitoring>>()
                    .Title("Журнал контроля")
                    .ListView(builder => builder
                        .Title("Журнал контроля")
                        .HiddenActions(new[] { LvAction.Create })
                        .ConditionAppearence(rules => rules
                            .Add("IsValid == true", "\\#5cb85c")
                            .Add("IsValid == false", "\\#d9534f")
                    ))
                    .DetailView(builder => builder
                        .Title("Журнал контроля")
                        .Editors(eds => eds
                            .Add(ed => ed.ReportMonitoringResult, ac => ac.Mnemonic("ReportMonitoringResult_Filtered")
                                            .SetCustomsParams($" customParams: editor.getForm().getPr('ID') ")))
                        .DefaultSettings((uow, obj, model) =>
                        {
                            model.SetReadOnlyAll();
                            model.ReadOnly(r => r.Comment, false);                           
                            if (obj.ReportMonitoringEventType?.Code?.StartsWith("Report_") == true
                            && !(obj.ReportMonitoringResult?.Code == "NoDiff"))
                                model.ReadOnly(r => r.ReportMonitoringResult, false);
                        })
                    )
                    ;

            context.CreateVmConfigOnBase<ReportMonitoring>(nameof(ReportMonitoring), "ReportMonitoringCM")
                .Service<ITypeObjectService<ReportMonitoring>>()
                .Title("Журнал контроля (Монитор)")
                .ListView(builder => builder
                    .Title("Журнал контроля (Монитор)")
                    .HiddenActions(new[] { LvAction.Create })
                    .Columns(cols => cols
                          .Add(col => col.Consolidation, ac => ac.Order(1))
                          .Add(col => col.ReportName, ac => ac.Order(2))
                          .Add(col => col.SibUser, ac => ac.Order(3))
                          .Add(col => col.IsValid, ac => ac.Order(4))
                          .Add(col => col.ReportMonitoringResult, ac => ac.Order(5))
                          .Add(col => col.ImportDateTime, ac => ac.Order(6))
                          .Add(col => col.StartDate, ac => ac.Order(7))
                          .Add(col => col.EndDate, ac => ac.Order(8))
                          .Add(col => col.Comment, ac => ac.Order(12))
                    )
                    .ConditionAppearence(rules => rules
                        .Add("IsValid == true", "\\#5cb85c")
                        .Add("IsValid == false", "\\#d9534f")
                    )
                 )
                .DetailView(builder => builder
                    .Title("Журнал контроля")
                    .DefaultSettings((uow, obj, model) =>
                    {
                        model.SetReadOnlyAll();
                        model.ReadOnly(r => r.Comment, false);
                        if (obj.ReportMonitoringEventType?.Code?.StartsWith("Report_") == true 
                        &&  !(obj.ReportMonitoringResult?.Code == "NoDiff"))
                            model.ReadOnly(r => r.ReportMonitoringResult, false);
                    })
                );


            context.CreateVmConfig<AccountingCalculatedField>()
                .Service<AccountingCalculatedFieldService>()
                .Title("Расчеты ОС")
                .ListView(builder => builder.Title("Расчеты ОС")
                .Columns(cols => cols
                .Add(col => col.TaxSumYear, ac => ac.ClientTemplate("#= data.{0} != null ? kendo.toString(data.{0}, 'n0') : '' #"))
                .Add(col => col.TaxSumWithPrivilege, ac => ac.ClientTemplate("#= data.{0} != null ? kendo.toString(data.{0}, 'n0') : '' #"))
                .Add(col => col.PrepaymentSumFirstQuarter, ac => ac.ClientTemplate("#= data.{0} != null ? kendo.toString(data.{0}, 'n0') : '' #"))
                .Add(col => col.PrepaymentSumSecondQuarter, ac => ac.ClientTemplate("#= data.{0} != null ? kendo.toString(data.{0}, 'n0') : '' #"))
                .Add(col => col.PrepaymentSumThirdQuarter, ac => ac.ClientTemplate("#= data.{0} != null ? kendo.toString(data.{0}, 'n0') : '' #"))
                .Add(col => col.PaymentTaxSum, ac => ac.ClientTemplate("#= data.{0} != null ? kendo.toString(data.{0}, 'n0') : '' #"))
                .Add(col => col.PrepaymentSumYear, ac => ac.ClientTemplate("#= data.{0} != null ? kendo.toString(data.{0}, 'n0') : '' #"))
                ))
                .DetailView(builder => builder.Title("Расчеты ОС")
                    .DefaultSettings((uow, r, commonEditorViewModel) =>
                    {
                        commonEditorViewModel.SetReadOnlyAll();
                    }))
                .LookupProperty(l => l.Text(t => t.ID)
                );

            context.CreateVmConfigOnBase<AccountingCalculatedField>(nameof(AccountingCalculatedField), "AccountingFields")
                .Service<AccountingCalculatedFieldService>()
                .Title("Расчеты ОС")
                .ListView(builder => builder.Title("Расчеты ОС")
                    .Columns(col => col
                        .Add(a => a.ResidualCost_01, h => h.Visible(false))
                        .Add(a => a.ResidualCost_02, h => h.Visible(false))
                        .Add(a => a.ResidualCost_03, h => h.Visible(false))
                        .Add(a => a.ResidualCost_04, h => h.Visible(false))
                        .Add(a => a.ResidualCost_05, h => h.Visible(false))
                        .Add(a => a.ResidualCost_06, h => h.Visible(false))
                        .Add(a => a.ResidualCost_07, h => h.Visible(false))
                        .Add(a => a.ResidualCost_08, h => h.Visible(false))
                        .Add(a => a.ResidualCost_09, h => h.Visible(false))
                        .Add(a => a.ResidualCost_10, h => h.Visible(false))
                        .Add(a => a.ResidualCost_11, h => h.Visible(false))
                        .Add(a => a.ResidualCost_12, h => h.Visible(false))
                        .Add(a => a.AccountingObjectName, h => h.Visible(false))
                        .Add(a => a.OKTMO, h => h.Visible(false))
                        .Add(a => a.OKTMO, h => h.Visible(false))))
                .DetailView(builder => builder.Title("Расчеты ОС")
                    .Editors(edt => edt
                        .Add(a => a.ResidualCost_01, h => h.Visible(false))
                        .Add(a => a.ResidualCost_02, h => h.Visible(false))
                        .Add(a => a.ResidualCost_03, h => h.Visible(false))
                        .Add(a => a.ResidualCost_04, h => h.Visible(false))
                        .Add(a => a.ResidualCost_05, h => h.Visible(false))
                        .Add(a => a.ResidualCost_06, h => h.Visible(false))
                        .Add(a => a.ResidualCost_07, h => h.Visible(false))
                        .Add(a => a.ResidualCost_08, h => h.Visible(false))
                        .Add(a => a.ResidualCost_09, h => h.Visible(false))
                        .Add(a => a.ResidualCost_10, h => h.Visible(false))
                        .Add(a => a.ResidualCost_11, h => h.Visible(false))
                        .Add(a => a.ResidualCost_12, h => h.Visible(false))
                        .Add(a => a.AccountingObjectName, h => h.Visible(false))
                        .Add(a => a.OKTMO, h => h.Visible(false))
                        .Add(a => a.OKTMO, h => h.Visible(false))

                    )
                    .DefaultSettings((uow, r, commonEditorViewModel) =>
                    {
                        commonEditorViewModel.SetReadOnlyAll();
                    }))
                .LookupProperty(l => l.Text(t => t.ID)
                );

            context.CreateVmConfigOnBase<AccountingCalculatedField>("AccountingFields", "AccountingFieldsNA")
                .Title("Расчеты ОС")
                .ListView(builder => builder.Title("Расчеты ОС")
                    .DataSource(ds => ds.Filter(f => f.CalculationDatasource == "НА")))
                .DetailView(builder => builder.Title("Расчеты ОС"))
                .LookupProperty(lp => lp.Text(t => t.ID));


            context.CreateVmConfig<AccountingCalculatedField>("AccountingCalculatedFieldOI")
               .Title("Расчет по имуществу")
               .DetailView(dv => dv.Title("Расчет по имуществу")
               .Editors(eds => eds.Clear()
                    .Add(ed => ed.BusinessArea, h => h.Visible(true))
                    .Add(ed => ed.ExternalID, h => h.Visible(true))
                    .Add(ed => ed.SubNumber, h => h.Visible(true))
                    .Add(ed => ed.IsEstateMovable, h => h.Visible(true))
                    .Add(ed => ed.AccountingObjectName, h => h.Visible(true))
                    .Add(ed => ed.InventoryNumber, h => h.Visible(true))
                    .Add(ed => ed.DepreciationGroup, h => h.Visible(true))
                    .Add(ed => ed.AccountLedgerLUS, h => h.Visible(true))
                    .Add(ed => ed.SyntheticAccount, h => h.Visible(true))
                    .Add(ed => ed.OKOF, h => h.Visible(true))
                    .Add(ed => ed.OKTMO, h => h.Visible(true))
                    .Add(ed => ed.CadastralNumber, h => h.Visible(true))
                    .Add(ed => ed.GetByRestruct, h => h.Visible(true))
                    .Add(ed => ed.GetFromInterdependent, h => h.Visible(true))
                    .Add(ed => ed.RegDate, h => h.Visible(true))
                    .Add(ed => ed.ResidualCost_01, h => h.Visible(true))
                    .Add(ed => ed.ResidualCost_02, h => h.Visible(true))
                    .Add(ed => ed.ResidualCost_03, h => h.Visible(true))
                    .Add(ed => ed.ResidualCost_04, h => h.Visible(true))
                    .Add(ed => ed.ResidualCost_05, h => h.Visible(true))
                    .Add(ed => ed.ResidualCost_06, h => h.Visible(true))
                    .Add(ed => ed.ResidualCost_07, h => h.Visible(true))
                    .Add(ed => ed.ResidualCost_08, h => h.Visible(true))
                    .Add(ed => ed.ResidualCost_09, h => h.Visible(true))
                    .Add(ed => ed.ResidualCost_10, h => h.Visible(true))
                    .Add(ed => ed.ResidualCost_11, h => h.Visible(true))
                    .Add(ed => ed.ResidualCost_12, h => h.Visible(true))
                    .Add(ed => ed.ResidualCost_13, h => h.Visible(true))
                    .Add(ed => ed.AvgPriceYear, h => h.Visible(true))
                    .Add(ed => ed.UntaxedAnnualCostAvg, h => h.Visible(true))
                    .Add(ed => ed.CadastralValue, h => h.Visible(true))
                    .Add(ed => ed.ShareRightNumerator, h => h.Visible(true))
                    .Add(ed => ed.ShareRightDenominator, h => h.Visible(true))
                    .Add(ed => ed.TaxExemption, h => h.Visible(true))
                    .Add(ed => ed.TaxBaseValue, h => h.Visible(true))
                    .Add(ed => ed.TaxExemptionLow, h => h.Visible(false))
                    .Add(ed => ed.TaxRate, h => h.Visible(true))
                    .Add(ed => ed.FactorK, h => h.Visible(true).EditorTemplate("Sib_Decimal4"))
                    .Add(ed => ed.TaxSumYear, h => h.Visible(true))
                    .Add(ed => ed.PrepaymentSumFirstQuarter, h => h.Visible(true))
                    .Add(ed => ed.PrepaymentSumSecondQuarter, h => h.Visible(true))
                    .Add(ed => ed.PrepaymentSumThirdQuarter, h => h.Visible(true))
                    .Add(ed => ed.TaxLow, h => h.Visible(false))
                    .Add(ed => ed.TaxLowerPercent, h => h.Visible(true))
                    .Add(ed => ed.TaxLowSum, h => h.Visible(true))
                    .Add(ed => ed.IFNS, h => h.Visible(true))
                    .Add(ed => ed.EUSINumber, h => h.Visible(true))
                    .Add(ed => ed.TaxBaseID, h => h.Visible(false))
                    .Add(ed => ed.ResidualCost_14, h => h.Visible(false))
                    .Add(ed => ed.Year, h => h.Visible(true))
                    .Add(ed => ed.CalculateDate, h => h.Visible(true))
                    .Add(ed => ed.TaxSumWithPrivilege, h => h.Visible(false))
                    .Add(ed => ed.AvgPriceFirstQuarter, h => h.Visible(false))
                    .Add(ed => ed.AvgPriceSecondQuarter, h => h.Visible(false))
                    .Add(ed => ed.AvgPriceThirdQuarter, h => h.Visible(false))
                    .Add(ed => ed.PaymentTaxSum, h => h.Visible(false))
                    .Add(ed => ed.CalculationDatasource, h => h.Visible(false))
                    .Add(ed => ed.IsCadastralCost, h => h.Visible(false))
                    .Add(ed => ed.AccountingObjectID, h => h.Visible(false))
                    .Add(ed => ed.CalculatingRecordID, h => h.Visible(false))
                    .Add(ed => ed.DeclarationID, h => h.Visible(false))
                    .Add(ed => ed.EstateKindCode, h => h.Visible(false))
                    .Add(ed => ed.TaxExemptionLowSum, h => h.Visible(false))
                    .Add(ed => ed.TaxExemptionFree, h => h.Visible(false))
                    .Add(ed => ed.TaxExemptionFreeSum, h => h.Visible(false))
                    .Add(ed => ed.TaxExemptionFreeLand, h => h.Visible(false))
                    .Add(ed => ed.TaxExemptionFreeSumLand, h => h.Visible(false))
                    .Add(ed => ed.PrepaymentSumYear, h => h.Visible(false))
                    .Add(ed => ed.TaxReportPeriodID, h => h.Visible(false))
                    .Add(ed => ed.ConsolidationID, h => h.Visible(false))
                    .Add(ed => ed.VehicleSerialNumber, h => h.Visible(false))
                    .Add(ed => ed.VehicleSignNumber, h => h.Visible(false))
                    .Add(ed => ed.EcoKlass, h => h.Visible(false))
                    .Add(ed => ed.VehicleYearOfIssue, h => h.Visible(false))
                    .Add(ed => ed.VehicleMonthOwn, h => h.Visible(false))
                    .Add(ed => ed.Share, h => h.Visible(false))
                    .Add(ed => ed.VehicleTaxFactor, h => h.Visible(false))
                    .Add(ed => ed.IncludeCadRegDate, h => h.Visible(false))
                    .Add(ed => ed.IncludeCadRegDoc, h => h.Visible(false))
                    .Add(ed => ed.LandCategory, h => h.Visible(false))
                    .Add(ed => ed.CadRegDate, h => h.Visible(false))
                    .Add(ed => ed.ShareTaxPayerNumerator, h => h.Visible(false))
                    .Add(ed => ed.ShareTaxPayerDenominator, h => h.Visible(false))
                    .Add(ed => ed.CountFullMonthsLand, h => h.Visible(false))
                    .Add(ed => ed.FactorKv, h => h.Visible(false).EditorTemplate("Sib_Decimal4"))
                    .Add(ed => ed.TaxExemptionStartDateLand, h => h.Visible(false))
                    .Add(ed => ed.TaxExemptionEndDateLand, h => h.Visible(false))
                    .Add(ed => ed.CountFullMonthsBenefit, h => h.Visible(false))
                    .Add(ed => ed.FactorKl, h => h.Visible(false).EditorTemplate("Sib_Decimal4"))
                    .Add(ed => ed.CalcSum, h => h.Visible(false))
                    .Add(ed => ed.VehicleKindCode, h => h.Visible(false))
                    .Add(ed => ed.VehicleRegDate, h => h.Visible(false))
                    .Add(ed => ed.VehicleDeRegDate, h => h.Visible(false))
                    .Add(ed => ed.TaxDeduction, h => h.Visible(false))
                    .Add(ed => ed.TaxDeductionSum, h => h.Visible(false))
                    .Add(ed => ed.InOtherSystem, h => h.Visible(false))
                    .Add(ed => ed.TaxRateWithExemption, h => h.Visible(false))
                    .Add(ed => ed.TaxExemptionStartDate, h => h.Visible(false))
                    .Add(ed => ed.TaxExemptionEndDate, h => h.Visible(false))
                    .Add(ed => ed.InitialCost, h => h.Visible(false))
                    .Add(ed => ed.CountOfYearsIssue, h => h.Visible(false))
                    .Add(ed => ed.DateOfReceipt, h => h.Visible(false))
                    .Add(ed => ed.LeavingDate, h => h.Visible(false))
                    .Add(ed => ed.TaxBaseValueTS, h => h.Visible(false))
                    .Add(ed => ed.TaxBaseMeasureTS, h => h.Visible(false))
                    .Add(ed => ed.VehicleModel, h => h.Visible(false))
                    .Add(ed => ed.OSNumber, h => h.Visible(false))
                    .Add(ed => ed.Hidden, h => h.Visible(false))
                    .Add(ed => ed.SortOrder, h => h.Visible(false))
                    .Add(ed => ed.RowVersion, h => h.Visible(false))
                    .Add(ed => ed.CadastralValueQuarter1, h => h.Visible(false))
                    .Add(ed => ed.CadastralValueQuarter2, h => h.Visible(false))
                    .Add(ed => ed.CadastralValueQuarter3, h => h.Visible(false))
                    .Add(ed => ed.TaxBaseValueQuarter1, h => h.Visible(false))
                    .Add(ed => ed.TaxBaseValueQuarter2, h => h.Visible(false))
                    .Add(ed => ed.TaxBaseValueQuarter3, h => h.Visible(false))
                    .Add(ed => ed.TaxRateQuarter1, h => h.Visible(false))
                    .Add(ed => ed.TaxRateQuarter2, h => h.Visible(false))
                    .Add(ed => ed.TaxRateQuarter3, h => h.Visible(false))
                    .Add(ed => ed.TaxSumYearQuarter1, h => h.Visible(false))
                    .Add(ed => ed.TaxSumYearQuarter2, h => h.Visible(false))
                    .Add(ed => ed.TaxSumYearQuarter3, h => h.Visible(false))
                    .Add(ed => ed.TaxLowSumQuarter1, h => h.Visible(false))
                    .Add(ed => ed.TaxLowSumQuarter2, h => h.Visible(false))
                    .Add(ed => ed.TaxLowSumQuarter3, h => h.Visible(false))
                    .Add(ed => ed.TaxExemptionFreeSumQuarter1, h => h.Visible(false))
                    .Add(ed => ed.TaxExemptionFreeSumQuarter2, h => h.Visible(false))
                    .Add(ed => ed.TaxExemptionFreeSumQuarter3, h => h.Visible(false))
                    .Add(ed => ed.FactorKv1, h => h.Visible(false).EditorTemplate("Sib_Decimal4"))
                    .Add(ed => ed.FactorKv2, h => h.Visible(false).EditorTemplate("Sib_Decimal4"))
                    .Add(ed => ed.FactorKv3, h => h.Visible(false).EditorTemplate("Sib_Decimal4"))
                    .Add(ed => ed.FactorKl1, h => h.Visible(false).EditorTemplate("Sib_Decimal4"))
                    .Add(ed => ed.FactorKl2, h => h.Visible(false).EditorTemplate("Sib_Decimal4"))
                    .Add(ed => ed.FactorKl3, h => h.Visible(false).EditorTemplate("Sib_Decimal4"))
                    .Add(ed => ed.FactorK1, h => h.Visible(false))
                    .Add(ed => ed.FactorK2, h => h.Visible(false))
                    .Add(ed => ed.FactorK3, h => h.Visible(false))
                    .Add(ed => ed.UntaxedAnnualCostAvgQuarter1, h => h.Visible(false))
                    .Add(ed => ed.UntaxedAnnualCostAvgQuarter2, h => h.Visible(false))
                    .Add(ed => ed.UntaxedAnnualCostAvgQuarter3, h => h.Visible(false))
               ))
               .ListView(lv => lv.Title("Расчет по имуществу")
               .Columns(cols => cols.Clear()
                    .Add(ed => ed.BusinessArea, h => h.Visible(true))
                    .Add(ed => ed.ExternalID, h => h.Visible(true))
                    .Add(ed => ed.SubNumber, h => h.Visible(true))
                    .Add(ed => ed.IsEstateMovable, h => h.Visible(true))
                    .Add(ed => ed.AccountingObjectName, h => h.Visible(true))
                    .Add(ed => ed.InventoryNumber, h => h.Visible(true))
                    .Add(ed => ed.DepreciationGroup, h => h.Visible(true))
                    .Add(ed => ed.AccountLedgerLUS, h => h.Visible(true))
                    .Add(ed => ed.SyntheticAccount, h => h.Visible(true))
                    .Add(ed => ed.OKOF, h => h.Visible(true))
                    .Add(ed => ed.OKTMO, h => h.Visible(true))
                    .Add(ed => ed.CadastralNumber, h => h.Visible(true))
                    .Add(ed => ed.GetByRestruct, h => h.Visible(true))
                    .Add(ed => ed.GetFromInterdependent, h => h.Visible(true))
                    .Add(ed => ed.RegDate, h => h.Visible(true))
                    .Add(ed => ed.ResidualCost_01, h => h.Visible(true))
                    .Add(ed => ed.ResidualCost_02, h => h.Visible(true))
                    .Add(ed => ed.ResidualCost_03, h => h.Visible(true))
                    .Add(ed => ed.ResidualCost_04, h => h.Visible(true))
                    .Add(ed => ed.ResidualCost_05, h => h.Visible(true))
                    .Add(ed => ed.ResidualCost_06, h => h.Visible(true))
                    .Add(ed => ed.ResidualCost_07, h => h.Visible(true))
                    .Add(ed => ed.ResidualCost_08, h => h.Visible(true))
                    .Add(ed => ed.ResidualCost_09, h => h.Visible(true))
                    .Add(ed => ed.ResidualCost_10, h => h.Visible(true))
                    .Add(ed => ed.ResidualCost_11, h => h.Visible(true))
                    .Add(ed => ed.ResidualCost_12, h => h.Visible(true))
                    .Add(ed => ed.ResidualCost_13, h => h.Visible(true))
                    .Add(ed => ed.AvgPriceYear, h => h.Visible(true))
                    .Add(ed => ed.UntaxedAnnualCostAvg, h => h.Visible(true))
                    .Add(ed => ed.CadastralValue, h => h.Visible(true))
                    .Add(ed => ed.ShareRightNumerator, h => h.Visible(true))
                    .Add(ed => ed.ShareRightDenominator, h => h.Visible(true))
                    .Add(ed => ed.TaxExemption, h => h.Visible(true))
                    .Add(ed => ed.TaxBase, h => h.Visible(true))
                    .Add(ed => ed.TaxBaseValue, h => h.Visible(true))
                    .Add(ed => ed.TaxExemptionLow, h => h.Visible(true))
                    .Add(ed => ed.TaxRate, h => h.Visible(true))
                    .Add(ed => ed.FactorK, h => h.Visible(true))
                    .Add(ed => ed.TaxSumYear, h => h.Visible(true))
                    .Add(ed => ed.PrepaymentSumFirstQuarter, h => h.Visible(true))
                    .Add(ed => ed.PrepaymentSumSecondQuarter, h => h.Visible(true))
                    .Add(ed => ed.PrepaymentSumThirdQuarter, h => h.Visible(true))
                    .Add(ed => ed.TaxLow, h => h.Visible(true))
                    .Add(ed => ed.TaxLowerPercent, h => h.Visible(true))
                    .Add(ed => ed.TaxLowSum, h => h.Visible(true))
                    .Add(ed => ed.PaymentTaxSum, h => h.Visible(true))
                    .Add(ed => ed.IncludeCadRegDate, h => h.Visible(true))
                    .Add(ed => ed.IncludeCadRegDoc, h => h.Visible(true))
                    .Add(ed => ed.IFNS, h => h.Visible(true))
                    .Add(ed => ed.EUSINumber, h => h.Visible(true))
                    .Add(ed => ed.ResidualCost_14, h => h.Visible(false))
                    .Add(ed => ed.Year, h => h.Visible(true))
                    .Add(ed => ed.CalculateDate, h => h.Visible(true))
                    .Add(ed => ed.TaxSumWithPrivilege, h => h.Visible(false))
                    .Add(ed => ed.AvgPriceFirstQuarter, h => h.Visible(false))
                    .Add(ed => ed.AvgPriceSecondQuarter, h => h.Visible(false))
                    .Add(ed => ed.AvgPriceThirdQuarter, h => h.Visible(false))
                    .Add(ed => ed.CalculationDatasource, h => h.Visible(false))
                    .Add(ed => ed.IsCadastralCost, h => h.Visible(false))
                    .Add(ed => ed.AccountingObjectID, h => h.Visible(false))
                    .Add(ed => ed.CalculatingRecordID, h => h.Visible(false))
                    .Add(ed => ed.DeclarationID, h => h.Visible(false))
                    .Add(ed => ed.EstateKindCode, h => h.Visible(false))
                    .Add(ed => ed.TaxExemptionLowSum, h => h.Visible(false))
                    .Add(ed => ed.TaxExemptionFree, h => h.Visible(false))
                    .Add(ed => ed.TaxExemptionFreeSum, h => h.Visible(false))
                    .Add(ed => ed.TaxExemptionFreeLand, h => h.Visible(false))
                    .Add(ed => ed.TaxExemptionFreeSumLand, h => h.Visible(false))
                    .Add(ed => ed.PrepaymentSumYear, h => h.Visible(false))
                    .Add(ed => ed.TaxReportPeriodID, h => h.Visible(false))
                    .Add(ed => ed.ConsolidationID, h => h.Visible(false))
                    .Add(ed => ed.VehicleSerialNumber, h => h.Visible(false))
                    .Add(ed => ed.VehicleSignNumber, h => h.Visible(false))
                    .Add(ed => ed.EcoKlass, h => h.Visible(false))
                    .Add(ed => ed.VehicleYearOfIssue, h => h.Visible(false))
                    .Add(ed => ed.VehicleMonthOwn, h => h.Visible(false))
                    .Add(ed => ed.Share, h => h.Visible(false))
                    .Add(ed => ed.VehicleTaxFactor, h => h.Visible(false))
                    .Add(ed => ed.LandCategory, h => h.Visible(false))
                    .Add(ed => ed.CadRegDate, h => h.Visible(false))
                    .Add(ed => ed.ShareTaxPayerNumerator, h => h.Visible(false))
                    .Add(ed => ed.ShareTaxPayerDenominator, h => h.Visible(false))
                    .Add(ed => ed.CountFullMonthsLand, h => h.Visible(false))
                    .Add(ed => ed.FactorKv, h => h.Visible(false).ClientTemplate("#= data.{0} != null ? kendo.toString(data.{0}, 'n4') : '' #"))
                    .Add(ed => ed.TaxExemptionStartDateLand, h => h.Visible(false))
                    .Add(ed => ed.TaxExemptionEndDateLand, h => h.Visible(false))
                    .Add(ed => ed.CountFullMonthsBenefit, h => h.Visible(false))
                    .Add(ed => ed.FactorKl, h => h.Visible(false).ClientTemplate("#= data.{0} != null ? kendo.toString(data.{0}, 'n4') : '' #"))
                    .Add(ed => ed.CalcSum, h => h.Visible(false))
                    .Add(ed => ed.VehicleKindCode, h => h.Visible(false))
                    .Add(ed => ed.VehicleRegDate, h => h.Visible(false))
                    .Add(ed => ed.VehicleDeRegDate, h => h.Visible(false))
                    .Add(ed => ed.TaxDeduction, h => h.Visible(false))
                    .Add(ed => ed.TaxDeductionSum, h => h.Visible(false))
                    .Add(ed => ed.InOtherSystem, h => h.Visible(false))
                    .Add(ed => ed.TaxRateWithExemption, h => h.Visible(false))
                    .Add(ed => ed.TaxExemptionStartDate, h => h.Visible(false))
                    .Add(ed => ed.TaxExemptionEndDate, h => h.Visible(false))
                    .Add(ed => ed.InitialCost, h => h.Visible(false))
                    .Add(ed => ed.CountOfYearsIssue, h => h.Visible(false))
                    .Add(ed => ed.DateOfReceipt, h => h.Visible(false))
                    .Add(ed => ed.LeavingDate, h => h.Visible(false))
                    .Add(ed => ed.TaxBaseValueTS, h => h.Visible(false))
                    .Add(ed => ed.TaxBaseMeasureTS, h => h.Visible(false))
                    .Add(ed => ed.VehicleModel, h => h.Visible(false))
                    .Add(ed => ed.OSNumber, h => h.Visible(false))
                    .Add(ed => ed.Hidden, h => h.Visible(false))
                    .Add(ed => ed.SortOrder, h => h.Visible(false))
                    .Add(ed => ed.RowVersion, h => h.Visible(false))
                    .Add(ed => ed.CadastralValueQuarter1, h => h.Visible(false))
                    .Add(ed => ed.CadastralValueQuarter2, h => h.Visible(false))
                    .Add(ed => ed.CadastralValueQuarter3, h => h.Visible(false))
                    .Add(ed => ed.TaxBaseValueQuarter1, h => h.Visible(false))
                    .Add(ed => ed.TaxBaseValueQuarter2, h => h.Visible(false))
                    .Add(ed => ed.TaxBaseValueQuarter3, h => h.Visible(false))
                    .Add(ed => ed.TaxRateQuarter1, h => h.Visible(false))
                    .Add(ed => ed.TaxRateQuarter2, h => h.Visible(false))
                    .Add(ed => ed.TaxRateQuarter3, h => h.Visible(false))
                    .Add(ed => ed.TaxSumYearQuarter1, h => h.Visible(false))
                    .Add(ed => ed.TaxSumYearQuarter2, h => h.Visible(false))
                    .Add(ed => ed.TaxSumYearQuarter3, h => h.Visible(false))
                    .Add(ed => ed.TaxLowSumQuarter1, h => h.Visible(false))
                    .Add(ed => ed.TaxLowSumQuarter2, h => h.Visible(false))
                    .Add(ed => ed.TaxLowSumQuarter3, h => h.Visible(false))
                    .Add(ed => ed.TaxExemptionFreeSumQuarter1, h => h.Visible(false))
                    .Add(ed => ed.TaxExemptionFreeSumQuarter2, h => h.Visible(false))
                    .Add(ed => ed.TaxExemptionFreeSumQuarter3, h => h.Visible(false))
                    .Add(ed => ed.FactorKv1, h => h.Visible(false).ClientTemplate("#= data.{0} != null ? kendo.toString(data.{0}, 'n4') : '' #"))
                    .Add(ed => ed.FactorKv2, h => h.Visible(false).ClientTemplate("#= data.{0} != null ? kendo.toString(data.{0}, 'n4') : '' #"))
                    .Add(ed => ed.FactorKv3, h => h.Visible(false).ClientTemplate("#= data.{0} != null ? kendo.toString(data.{0}, 'n4') : '' #"))
                    .Add(ed => ed.FactorKl1, h => h.Visible(false).ClientTemplate("#= data.{0} != null ? kendo.toString(data.{0}, 'n4') : '' #"))
                    .Add(ed => ed.FactorKl2, h => h.Visible(false).ClientTemplate("#= data.{0} != null ? kendo.toString(data.{0}, 'n4') : '' #"))
                    .Add(ed => ed.FactorKl3, h => h.Visible(false).ClientTemplate("#= data.{0} != null ? kendo.toString(data.{0}, 'n4') : '' #"))
                    .Add(ed => ed.FactorK1, h => h.Visible(false))
                    .Add(ed => ed.FactorK2, h => h.Visible(false))
                    .Add(ed => ed.FactorK3, h => h.Visible(false))
                    .Add(ed => ed.UntaxedAnnualCostAvgQuarter1, h => h.Visible(false))
                    .Add(ed => ed.UntaxedAnnualCostAvgQuarter2, h => h.Visible(false))
                    .Add(ed => ed.UntaxedAnnualCostAvgQuarter3, h => h.Visible(false))
               ))
               .IsReadOnly();

            context.CreateVmConfig<AccountingCalculatedField>("AccountingCalculatedFieldLand")
               .Title("Расчет по земле")
               .DetailView(dv => dv.Title("Расчет по земле")
               .Editors(eds => eds.Clear()
                    .Add(ed => ed.EUSINumber, h => h.Visible(true))
                    .Add(ed => ed.IFNS, h => h.Visible(true))
                    .Add(ed => ed.OKTMO, h => h.Visible(true))
                    .Add(ed => ed.InventoryNumber, h => h.Visible(true))
                    .Add(ed => ed.CadastralNumber, h => h.Visible(true))
                    .Add(ed => ed.LandCategory, h => h.Visible(true))
                    .Add(ed => ed.CadastralValue, h => h.Visible(true))
                    .Add(ed => ed.DateOfReceipt, h => h.Visible(false))
                    .Add(ed => ed.ShareRightNumerator, h => h.Visible(true))
                    .Add(ed => ed.ShareRightDenominator, h => h.Visible(true))
                    .Add(ed => ed.TaxBaseValue, h => h.Visible(true))
                    .Add(ed => ed.TaxRate, h => h.Visible(true))
                    .Add(ed => ed.CountFullMonthsLand, h => h.Visible(true))
                    .Add(ed => ed.FactorKv, h => h.Visible(true).EditorTemplate("Sib_Decimal4"))
                    .Add(ed => ed.TaxSumYear, h => h.Visible(true))
                    .Add(ed => ed.TaxExemptionStartDateLand, h => h.Visible(true))
                    .Add(ed => ed.TaxExemptionEndDateLand, h => h.Visible(true))
                    .Add(ed => ed.CountFullMonthsBenefit, h => h.Visible(true))
                    .Add(ed => ed.FactorKl, h => h.Visible(true).EditorTemplate("Sib_Decimal4"))
                    .Add(ed => ed.TaxExemptionFreeSumLand, h => h.Visible(true))
                    .Add(ed => ed.TaxLowSum, h => h.Visible(true))
                    .Add(ed => ed.TaxLowerPercent, h => h.Visible(true))
                    .Add(ed => ed.CalcSum, h => h.Visible(true))
                    .Add(ed => ed.PrepaymentSumFirstQuarter, h => h.Visible(true))
                    .Add(ed => ed.PrepaymentSumSecondQuarter, h => h.Visible(true))
                    .Add(ed => ed.PrepaymentSumThirdQuarter, h => h.Visible(true))
                    .Add(ed => ed.PaymentTaxSum, h => h.Visible(true))
                    .Add(ed => ed.AccountingObjectName, h => h.Visible(false))
                    .Add(ed => ed.TaxBaseID, h => h.Visible(false))
                    .Add(ed => ed.ResidualCost_01, h => h.Visible(false))
                    .Add(ed => ed.ResidualCost_02, h => h.Visible(false))
                    .Add(ed => ed.ResidualCost_03, h => h.Visible(false))
                    .Add(ed => ed.ResidualCost_04, h => h.Visible(false))
                    .Add(ed => ed.ResidualCost_05, h => h.Visible(false))
                    .Add(ed => ed.ResidualCost_06, h => h.Visible(false))
                    .Add(ed => ed.ResidualCost_07, h => h.Visible(false))
                    .Add(ed => ed.ResidualCost_08, h => h.Visible(false))
                    .Add(ed => ed.ResidualCost_09, h => h.Visible(false))
                    .Add(ed => ed.ResidualCost_10, h => h.Visible(false))
                    .Add(ed => ed.ResidualCost_11, h => h.Visible(false))
                    .Add(ed => ed.ResidualCost_12, h => h.Visible(false))
                    .Add(ed => ed.ResidualCost_13, h => h.Visible(false))
                    .Add(ed => ed.ResidualCost_14, h => h.Visible(false))
                    .Add(ed => ed.Year, h => h.Visible(true))
                    .Add(ed => ed.CalculateDate, h => h.Visible(true))
                    .Add(ed => ed.TaxSumWithPrivilege, h => h.Visible(false))
                    .Add(ed => ed.AvgPriceFirstQuarter, h => h.Visible(false))
                    .Add(ed => ed.AvgPriceSecondQuarter, h => h.Visible(false))
                    .Add(ed => ed.AvgPriceThirdQuarter, h => h.Visible(false))
                    .Add(ed => ed.AvgPriceYear, h => h.Visible(false))
                    .Add(ed => ed.CalculationDatasource, h => h.Visible(false))
                    .Add(ed => ed.IsCadastralCost, h => h.Visible(false))
                    .Add(ed => ed.AccountingObjectID, h => h.Visible(false))
                    .Add(ed => ed.CalculatingRecordID, h => h.Visible(false))
                    .Add(ed => ed.DeclarationID, h => h.Visible(false))
                    .Add(ed => ed.EstateKindCode, h => h.Visible(false))
                    .Add(ed => ed.TaxExemption, h => h.Visible(false))
                    .Add(ed => ed.TaxExemptionLow, h => h.Visible(false))
                    .Add(ed => ed.TaxExemptionLowSum, h => h.Visible(false))
                    .Add(ed => ed.TaxLow, h => h.Visible(true))
                    .Add(ed => ed.TaxExemptionFree, h => h.Visible(true))
                    .Add(ed => ed.TaxExemptionFreeSum, h => h.Visible(true))
                    .Add(ed => ed.TaxExemptionFreeLand, h => h.Visible(true))
                    .Add(ed => ed.PrepaymentSumYear, h => h.Visible(false))
                    .Add(ed => ed.TaxReportPeriodID, h => h.Visible(false))
                    .Add(ed => ed.ConsolidationID, h => h.Visible(false))
                    .Add(ed => ed.VehicleSerialNumber, h => h.Visible(false))
                    .Add(ed => ed.VehicleSignNumber, h => h.Visible(false))
                    .Add(ed => ed.EcoKlass, h => h.Visible(false))
                    .Add(ed => ed.VehicleYearOfIssue, h => h.Visible(false))
                    .Add(ed => ed.VehicleMonthOwn, h => h.Visible(false))
                    .Add(ed => ed.Share, h => h.Visible(false))
                    .Add(ed => ed.VehicleTaxFactor, h => h.Visible(false))
                    .Add(ed => ed.BusinessArea, h => h.Visible(false))
                    .Add(ed => ed.ExternalID, h => h.Visible(false))
                    .Add(ed => ed.SubNumber, h => h.Visible(false))
                    .Add(ed => ed.IsEstateMovable, h => h.Visible(false))
                    .Add(ed => ed.DepreciationGroup, h => h.Visible(false))
                    .Add(ed => ed.AccountLedgerLUS, h => h.Visible(false))
                    .Add(ed => ed.SyntheticAccount, h => h.Visible(false))
                    .Add(ed => ed.OKOF, h => h.Visible(false))
                    .Add(ed => ed.GetByRestruct, h => h.Visible(false))
                    .Add(ed => ed.GetFromInterdependent, h => h.Visible(false))
                    .Add(ed => ed.RegDate, h => h.Visible(false))
                    .Add(ed => ed.FactorK, h => h.Visible(false))
                    .Add(ed => ed.IncludeCadRegDate, h => h.Visible(false))
                    .Add(ed => ed.IncludeCadRegDoc, h => h.Visible(false))
                    .Add(ed => ed.UntaxedAnnualCostAvg, h => h.Visible(false))
                    .Add(ed => ed.CadRegDate, h => h.Visible(true))
                    .Add(ed => ed.ShareTaxPayerNumerator, h => h.Visible(false))
                    .Add(ed => ed.ShareTaxPayerDenominator, h => h.Visible(false))
                    .Add(ed => ed.VehicleKindCode, h => h.Visible(false))
                    .Add(ed => ed.VehicleRegDate, h => h.Visible(false))
                    .Add(ed => ed.VehicleDeRegDate, h => h.Visible(false))
                    .Add(ed => ed.TaxDeduction, h => h.Visible(false))
                    .Add(ed => ed.TaxDeductionSum, h => h.Visible(false))
                    .Add(ed => ed.InOtherSystem, h => h.Visible(false))
                    .Add(ed => ed.TaxRateWithExemption, h => h.Visible(false))
                    .Add(ed => ed.TaxExemptionStartDate, h => h.Visible(false))
                    .Add(ed => ed.TaxExemptionEndDate, h => h.Visible(false))
                    .Add(ed => ed.InitialCost, h => h.Visible(false))
                    .Add(ed => ed.CountOfYearsIssue, h => h.Visible(false))
                    .Add(ed => ed.LeavingDate, h => h.Visible(false))
                    .Add(ed => ed.TaxBaseValueTS, h => h.Visible(false))
                    .Add(ed => ed.TaxBaseMeasureTS, h => h.Visible(false))
                    .Add(ed => ed.VehicleModel, h => h.Visible(false))
                    .Add(ed => ed.OSNumber, h => h.Visible(false))
                    .Add(ed => ed.Hidden, h => h.Visible(false))
                    .Add(ed => ed.SortOrder, h => h.Visible(false))
                    .Add(ed => ed.RowVersion, h => h.Visible(false))
                    .Add(ed => ed.CadastralValueQuarter1, h => h.Visible(false))
                    .Add(ed => ed.CadastralValueQuarter2, h => h.Visible(false))
                    .Add(ed => ed.CadastralValueQuarter3, h => h.Visible(false))
                    .Add(ed => ed.TaxBaseValueQuarter1, h => h.Visible(false))
                    .Add(ed => ed.TaxBaseValueQuarter2, h => h.Visible(false))
                    .Add(ed => ed.TaxBaseValueQuarter3, h => h.Visible(false))
                    .Add(ed => ed.TaxRateQuarter1, h => h.Visible(false))
                    .Add(ed => ed.TaxRateQuarter2, h => h.Visible(false))
                    .Add(ed => ed.TaxRateQuarter3, h => h.Visible(false))
                    .Add(ed => ed.TaxSumYearQuarter1, h => h.Visible(false))
                    .Add(ed => ed.TaxSumYearQuarter2, h => h.Visible(false))
                    .Add(ed => ed.TaxSumYearQuarter3, h => h.Visible(false))
                    .Add(ed => ed.TaxLowSumQuarter1, h => h.Visible(false))
                    .Add(ed => ed.TaxLowSumQuarter2, h => h.Visible(false))
                    .Add(ed => ed.TaxLowSumQuarter3, h => h.Visible(false))
                    .Add(ed => ed.TaxExemptionFreeSumQuarter1, h => h.Visible(false))
                    .Add(ed => ed.TaxExemptionFreeSumQuarter2, h => h.Visible(false))
                    .Add(ed => ed.TaxExemptionFreeSumQuarter3, h => h.Visible(false))
                    .Add(ed => ed.FactorKv1, h => h.Visible(false).EditorTemplate("Sib_Decimal4"))
                    .Add(ed => ed.FactorKv2, h => h.Visible(false).EditorTemplate("Sib_Decimal4"))
                    .Add(ed => ed.FactorKv3, h => h.Visible(false).EditorTemplate("Sib_Decimal4"))
                    .Add(ed => ed.FactorKl1, h => h.Visible(false).EditorTemplate("Sib_Decimal4"))
                    .Add(ed => ed.FactorKl2, h => h.Visible(false).EditorTemplate("Sib_Decimal4"))
                    .Add(ed => ed.FactorKl3, h => h.Visible(false).EditorTemplate("Sib_Decimal4"))
                    .Add(ed => ed.FactorK1, h => h.Visible(false))
                    .Add(ed => ed.FactorK2, h => h.Visible(false))
                    .Add(ed => ed.FactorK3, h => h.Visible(false))
                    .Add(ed => ed.UntaxedAnnualCostAvgQuarter1, h => h.Visible(false))
                    .Add(ed => ed.UntaxedAnnualCostAvgQuarter2, h => h.Visible(false))
                    .Add(ed => ed.UntaxedAnnualCostAvgQuarter3, h => h.Visible(false))
               ))
               .ListView(lv => lv.Title("Расчет по земле")
               .Columns(cols => cols.Clear()
                    .Add(ed => ed.EUSINumber, h => h.Visible(true))
                    .Add(ed => ed.IFNS, h => h.Visible(true))
                    .Add(ed => ed.OKTMO, h => h.Visible(true))
                    .Add(ed => ed.InventoryNumber, h => h.Visible(true))
                    .Add(ed => ed.CadastralNumber, h => h.Visible(true))
                    .Add(ed => ed.LandCategory, h => h.Visible(true))
                    .Add(ed => ed.CadastralValue, h => h.Visible(true))
                    .Add(ed => ed.CadRegDate, h => h.Visible(true))
                    .Add(ed => ed.ShareRightNumerator, h => h.Visible(true))
                    .Add(ed => ed.ShareRightDenominator, h => h.Visible(true))
                    .Add(ed => ed.TaxBaseValue, h => h.Visible(true))
                    .Add(ed => ed.TaxRate, h => h.Visible(true))
                    .Add(ed => ed.CountFullMonthsLand, h => h.Visible(true))
                    .Add(ed => ed.FactorKv, h => h.Visible(true).ClientTemplate("#= data.{0} != null ? kendo.toString(data.{0}, 'n4') : '' #"))
                    .Add(ed => ed.TaxSumYear, h => h.Visible(true))
                    .Add(ed => ed.TaxExemptionStartDateLand, h => h.Visible(true))
                    .Add(ed => ed.TaxExemptionEndDateLand, h => h.Visible(true))
                    .Add(ed => ed.CountFullMonthsBenefit, h => h.Visible(true))
                    .Add(ed => ed.FactorKl, h => h.Visible(true).ClientTemplate("#= data.{0} != null ? kendo.toString(data.{0}, 'n4') : '' #"))
                    .Add(ed => ed.TaxExemptionFreeLand, h => h.Visible(true))
                    .Add(ed => ed.TaxExemptionFreeSumLand, h => h.Visible(true))
                    .Add(ed => ed.TaxLow, h => h.Visible(true))
                    .Add(ed => ed.TaxLowSum, h => h.Visible(true))
                    .Add(ed => ed.TaxLowerPercent, h => h.Visible(true))
                    .Add(ed => ed.CalcSum, h => h.Visible(true))
                    .Add(ed => ed.PrepaymentSumFirstQuarter, h => h.Visible(true))
                    .Add(ed => ed.PrepaymentSumSecondQuarter, h => h.Visible(true))
                    .Add(ed => ed.PrepaymentSumThirdQuarter, h => h.Visible(true))
                    .Add(ed => ed.PaymentTaxSum, h => h.Visible(true))
                    .Add(ed => ed.Year, h => h.Visible(true))
                    .Add(ed => ed.CalculateDate, h => h.Visible(true))
                    .Add(ed => ed.TaxSumWithPrivilege, h => h.Visible(false))
                    .Add(ed => ed.AvgPriceFirstQuarter, h => h.Visible(false))
                    .Add(ed => ed.AvgPriceSecondQuarter, h => h.Visible(false))
                    .Add(ed => ed.AvgPriceThirdQuarter, h => h.Visible(false))
                    .Add(ed => ed.AvgPriceYear, h => h.Visible(false))
                    .Add(ed => ed.CalculationDatasource, h => h.Visible(false))
                    .Add(ed => ed.IsCadastralCost, h => h.Visible(false))
                    .Add(ed => ed.AccountingObjectID, h => h.Visible(false))
                    .Add(ed => ed.CalculatingRecordID, h => h.Visible(false))
                    .Add(ed => ed.DeclarationID, h => h.Visible(false))
                    .Add(ed => ed.EstateKindCode, h => h.Visible(false))
                    .Add(ed => ed.TaxExemption, h => h.Visible(false))
                    .Add(ed => ed.TaxExemptionLow, h => h.Visible(false))
                    .Add(ed => ed.TaxExemptionLowSum, h => h.Visible(false))
                    .Add(ed => ed.TaxExemptionFree, h => h.Visible(false))
                    .Add(ed => ed.TaxExemptionFreeSum, h => h.Visible(false))
                    .Add(ed => ed.PrepaymentSumYear, h => h.Visible(false))
                    .Add(ed => ed.TaxReportPeriodID, h => h.Visible(false))
                    .Add(ed => ed.ConsolidationID, h => h.Visible(false))
                    .Add(ed => ed.VehicleSerialNumber, h => h.Visible(false))
                    .Add(ed => ed.VehicleSignNumber, h => h.Visible(false))
                    .Add(ed => ed.EcoKlass, h => h.Visible(false))
                    .Add(ed => ed.VehicleYearOfIssue, h => h.Visible(false))
                    .Add(ed => ed.VehicleMonthOwn, h => h.Visible(false))
                    .Add(ed => ed.Share, h => h.Visible(false))
                    .Add(ed => ed.VehicleTaxFactor, h => h.Visible(false))
                    .Add(ed => ed.BusinessArea, h => h.Visible(false))
                    .Add(ed => ed.ExternalID, h => h.Visible(false))
                    .Add(ed => ed.SubNumber, h => h.Visible(false))
                    .Add(ed => ed.IsEstateMovable, h => h.Visible(false))
                    .Add(ed => ed.DepreciationGroup, h => h.Visible(false))
                    .Add(ed => ed.AccountLedgerLUS, h => h.Visible(false))
                    .Add(ed => ed.SyntheticAccount, h => h.Visible(false))
                    .Add(ed => ed.OKOF, h => h.Visible(false))
                    .Add(ed => ed.GetByRestruct, h => h.Visible(false))
                    .Add(ed => ed.GetFromInterdependent, h => h.Visible(false))
                    .Add(ed => ed.RegDate, h => h.Visible(false))
                    .Add(ed => ed.FactorK, h => h.Visible(false))
                    .Add(ed => ed.IncludeCadRegDate, h => h.Visible(false))
                    .Add(ed => ed.IncludeCadRegDoc, h => h.Visible(false))
                    .Add(ed => ed.UntaxedAnnualCostAvg, h => h.Visible(false))
                    .Add(ed => ed.DateOfReceipt, h => h.Visible(false))
                    .Add(ed => ed.ShareTaxPayerNumerator, h => h.Visible(false))
                    .Add(ed => ed.ShareTaxPayerDenominator, h => h.Visible(false))
                    .Add(ed => ed.VehicleKindCode, h => h.Visible(false))
                    .Add(ed => ed.VehicleRegDate, h => h.Visible(false))
                    .Add(ed => ed.VehicleDeRegDate, h => h.Visible(false))
                    .Add(ed => ed.TaxDeduction, h => h.Visible(false))
                    .Add(ed => ed.TaxDeductionSum, h => h.Visible(false))
                    .Add(ed => ed.InOtherSystem, h => h.Visible(false))
                    .Add(ed => ed.TaxRateWithExemption, h => h.Visible(false))
                    .Add(ed => ed.TaxExemptionStartDate, h => h.Visible(false))
                    .Add(ed => ed.TaxExemptionEndDate, h => h.Visible(false))
                    .Add(ed => ed.InitialCost, h => h.Visible(false))
                    .Add(ed => ed.CountOfYearsIssue, h => h.Visible(false))
                    .Add(ed => ed.LeavingDate, h => h.Visible(false))
                    .Add(ed => ed.TaxBaseValueTS, h => h.Visible(false))
                    .Add(ed => ed.TaxBaseMeasureTS, h => h.Visible(false))
                    .Add(ed => ed.VehicleModel, h => h.Visible(false))
                    .Add(ed => ed.OSNumber, h => h.Visible(false))
                    .Add(ed => ed.Hidden, h => h.Visible(false))
                    .Add(ed => ed.SortOrder, h => h.Visible(false))
                    .Add(ed => ed.RowVersion, h => h.Visible(false))
                    .Add(ed => ed.CadastralValueQuarter1, h => h.Visible(false))
                    .Add(ed => ed.CadastralValueQuarter2, h => h.Visible(false))
                    .Add(ed => ed.CadastralValueQuarter3, h => h.Visible(false))
                    .Add(ed => ed.TaxBaseValueQuarter1, h => h.Visible(false))
                    .Add(ed => ed.TaxBaseValueQuarter2, h => h.Visible(false))
                    .Add(ed => ed.TaxBaseValueQuarter3, h => h.Visible(false))
                    .Add(ed => ed.TaxRateQuarter1, h => h.Visible(false))
                    .Add(ed => ed.TaxRateQuarter2, h => h.Visible(false))
                    .Add(ed => ed.TaxRateQuarter3, h => h.Visible(false))
                    .Add(ed => ed.TaxSumYearQuarter1, h => h.Visible(false))
                    .Add(ed => ed.TaxSumYearQuarter2, h => h.Visible(false))
                    .Add(ed => ed.TaxSumYearQuarter3, h => h.Visible(false))
                    .Add(ed => ed.TaxLowSumQuarter1, h => h.Visible(false))
                    .Add(ed => ed.TaxLowSumQuarter2, h => h.Visible(false))
                    .Add(ed => ed.TaxLowSumQuarter3, h => h.Visible(false))
                    .Add(ed => ed.TaxExemptionFreeSumQuarter1, h => h.Visible(false))
                    .Add(ed => ed.TaxExemptionFreeSumQuarter2, h => h.Visible(false))
                    .Add(ed => ed.TaxExemptionFreeSumQuarter3, h => h.Visible(false))
                    .Add(ed => ed.FactorKv1, h => h.Visible(false).ClientTemplate("#= data.{0} != null ? kendo.toString(data.{0}, 'n4') : '' #"))
                    .Add(ed => ed.FactorKv2, h => h.Visible(false).ClientTemplate("#= data.{0} != null ? kendo.toString(data.{0}, 'n4') : '' #"))
                    .Add(ed => ed.FactorKv3, h => h.Visible(false).ClientTemplate("#= data.{0} != null ? kendo.toString(data.{0}, 'n4') : '' #"))
                    .Add(ed => ed.FactorKl1, h => h.Visible(false).ClientTemplate("#= data.{0} != null ? kendo.toString(data.{0}, 'n4') : '' #"))
                    .Add(ed => ed.FactorKl2, h => h.Visible(false).ClientTemplate("#= data.{0} != null ? kendo.toString(data.{0}, 'n4') : '' #"))
                    .Add(ed => ed.FactorKl3, h => h.Visible(false).ClientTemplate("#= data.{0} != null ? kendo.toString(data.{0}, 'n4') : '' #"))
                    .Add(ed => ed.FactorK1, h => h.Visible(false))
                    .Add(ed => ed.FactorK2, h => h.Visible(false))
                    .Add(ed => ed.FactorK3, h => h.Visible(false))
                    .Add(ed => ed.UntaxedAnnualCostAvgQuarter1, h => h.Visible(false))
                    .Add(ed => ed.UntaxedAnnualCostAvgQuarter2, h => h.Visible(false))
                    .Add(ed => ed.UntaxedAnnualCostAvgQuarter3, h => h.Visible(false))
                    .Add(ed => ed.AccountingObjectName, h => h.Visible(false))
                    .Add(ed => ed.TaxBaseID, h => h.Visible(false))
                    .Add(ed => ed.ResidualCost_01, h => h.Visible(false))
                    .Add(ed => ed.ResidualCost_02, h => h.Visible(false))
                    .Add(ed => ed.ResidualCost_03, h => h.Visible(false))
                    .Add(ed => ed.ResidualCost_04, h => h.Visible(false))
                    .Add(ed => ed.ResidualCost_05, h => h.Visible(false))
                    .Add(ed => ed.ResidualCost_06, h => h.Visible(false))
                    .Add(ed => ed.ResidualCost_07, h => h.Visible(false))
                    .Add(ed => ed.ResidualCost_08, h => h.Visible(false))
                    .Add(ed => ed.ResidualCost_09, h => h.Visible(false))
                    .Add(ed => ed.ResidualCost_10, h => h.Visible(false))
                    .Add(ed => ed.ResidualCost_11, h => h.Visible(false))
                    .Add(ed => ed.ResidualCost_12, h => h.Visible(false))
                    .Add(ed => ed.ResidualCost_13, h => h.Visible(false))
                    .Add(ed => ed.ResidualCost_14, h => h.Visible(false))
               ))
               .IsReadOnly();

            context.CreateVmConfig<AccountingCalculatedField>("AccountingCalculatedFieldTS")
               .Title("Расчет по транспорту")
               .DetailView(dv => dv.Title("Расчет по транспорту")
               .Editors(eds => eds.Clear()
                    .Add(ed => ed.IFNS, h => h.Visible(true))
                    .Add(ed => ed.OKTMO, h => h.Visible(true))
                    .Add(ed => ed.VehicleKindCode, h => h.Visible(true))
                    .Add(ed => ed.OSNumber, h => h.Visible(true))
                    .Add(ed => ed.AccountingObjectName, h => h.Visible(true))
                    .Add(ed => ed.DateOfReceipt, h => h.Visible(true))
                    .Add(ed => ed.LeavingDate, h => h.Visible(true))
                    .Add(ed => ed.VehicleSerialNumber, h => h.Visible(true))
                    .Add(ed => ed.VehicleModel, h => h.Visible(true))
                    .Add(ed => ed.VehicleSignNumber, h => h.Visible(true))
                    .Add(ed => ed.VehicleRegDate, h => h.Visible(true))
                    .Add(ed => ed.VehicleDeRegDate, h => h.Visible(true))
                    .Add(ed => ed.TaxBaseValueTS, h => h.Visible(true))
                    .Add(ed => ed.TaxBaseMeasureTS, h => h.Visible(true))
                    .Add(ed => ed.EcoKlass, h => h.Visible(true))
                    .Add(ed => ed.CountOfYearsIssue, h => h.Visible(true))
                    .Add(ed => ed.VehicleYearOfIssue, h => h.Visible(true))
                    .Add(ed => ed.VehicleMonthOwn, h => h.Visible(true))
                    .Add(ed => ed.ShareRightNumerator, h => h.Visible(true))
                    .Add(ed => ed.ShareRightDenominator, h => h.Visible(true))
                    .Add(ed => ed.FactorKv, h => h.Visible(true).EditorTemplate("Sib_Decimal4"))
                    .Add(ed => ed.TaxRate, h => h.Visible(true))
                    .Add(ed => ed.VehicleTaxFactor, h => h.Visible(true))
                    .Add(ed => ed.TaxSumYear, h => h.Visible(true))
                    .Add(ed => ed.TaxExemptionStartDate, h => h.Visible(true))
                    .Add(ed => ed.TaxExemptionEndDate, h => h.Visible(true))
                    .Add(ed => ed.CountFullMonthsBenefit, h => h.Visible(true))
                    .Add(ed => ed.FactorKl, h => h.Visible(true).EditorTemplate("Sib_Decimal4"))
                    .Add(ed => ed.TaxExemptionFree, h => h.Visible(true))
                    .Add(ed => ed.TaxExemptionFreeSum, h => h.Visible(true))
                    .Add(ed => ed.TaxLow, h => h.Visible(true))
                    .Add(ed => ed.TaxLowSum, h => h.Visible(true))
                    .Add(ed => ed.TaxLowerPercent, h => h.Visible(true))
                    .Add(ed => ed.TaxExemptionLow, h => h.Visible(true))
                    .Add(ed => ed.TaxRateWithExemption, h => h.Visible(true))
                    .Add(ed => ed.TaxExemptionLowSum, h => h.Visible(true))
                    .Add(ed => ed.CalcSum, h => h.Visible(true))
                    .Add(ed => ed.PrepaymentSumFirstQuarter, h => h.Visible(true))
                    .Add(ed => ed.PrepaymentSumSecondQuarter, h => h.Visible(true))
                    .Add(ed => ed.PrepaymentSumThirdQuarter, h => h.Visible(true))
                    .Add(ed => ed.PaymentTaxSum, h => h.Visible(true))
                    .Add(ed => ed.EUSINumber, h => h.Visible(true))
                    .Add(ed => ed.CadastralNumber, h => h.Visible(false))
                    .Add(ed => ed.CadastralValue, h => h.Visible(false))
                    .Add(ed => ed.TaxBaseID, h => h.Visible(false))
                    .Add(ed => ed.TaxBaseValue, h => h.Visible(false))
                    .Add(ed => ed.ResidualCost_01, h => h.Visible(false))
                    .Add(ed => ed.ResidualCost_02, h => h.Visible(false))
                    .Add(ed => ed.ResidualCost_03, h => h.Visible(false))
                    .Add(ed => ed.ResidualCost_04, h => h.Visible(false))
                    .Add(ed => ed.ResidualCost_05, h => h.Visible(false))
                    .Add(ed => ed.ResidualCost_06, h => h.Visible(false))
                    .Add(ed => ed.ResidualCost_07, h => h.Visible(false))
                    .Add(ed => ed.ResidualCost_08, h => h.Visible(false))
                    .Add(ed => ed.ResidualCost_09, h => h.Visible(false))
                    .Add(ed => ed.ResidualCost_10, h => h.Visible(false))
                    .Add(ed => ed.ResidualCost_11, h => h.Visible(false))
                    .Add(ed => ed.ResidualCost_12, h => h.Visible(false))
                    .Add(ed => ed.ResidualCost_13, h => h.Visible(false))
                    .Add(ed => ed.ResidualCost_14, h => h.Visible(false))
                    .Add(ed => ed.Year, h => h.Visible(true))
                    .Add(ed => ed.CalculateDate, h => h.Visible(true))
                    .Add(ed => ed.TaxSumWithPrivilege, h => h.Visible(false))
                    .Add(ed => ed.AvgPriceFirstQuarter, h => h.Visible(false))
                    .Add(ed => ed.AvgPriceSecondQuarter, h => h.Visible(false))
                    .Add(ed => ed.AvgPriceThirdQuarter, h => h.Visible(false))
                    .Add(ed => ed.AvgPriceYear, h => h.Visible(false))
                    .Add(ed => ed.CalculationDatasource, h => h.Visible(false))
                    .Add(ed => ed.IsCadastralCost, h => h.Visible(false))
                    .Add(ed => ed.AccountingObjectID, h => h.Visible(false))
                    .Add(ed => ed.CalculatingRecordID, h => h.Visible(false))
                    .Add(ed => ed.DeclarationID, h => h.Visible(false))
                    .Add(ed => ed.EstateKindCode, h => h.Visible(false))
                    .Add(ed => ed.TaxExemption, h => h.Visible(false))
                    .Add(ed => ed.TaxExemptionFreeLand, h => h.Visible(false))
                    .Add(ed => ed.TaxExemptionFreeSumLand, h => h.Visible(false))
                    .Add(ed => ed.PrepaymentSumYear, h => h.Visible(false))
                    .Add(ed => ed.TaxReportPeriodID, h => h.Visible(false))
                    .Add(ed => ed.ConsolidationID, h => h.Visible(false))
                    .Add(ed => ed.Share, h => h.Visible(false))
                    .Add(ed => ed.BusinessArea, h => h.Visible(false))
                    .Add(ed => ed.ExternalID, h => h.Visible(false))
                    .Add(ed => ed.SubNumber, h => h.Visible(false))
                    .Add(ed => ed.IsEstateMovable, h => h.Visible(false))
                    .Add(ed => ed.InventoryNumber, h => h.Visible(false))
                    .Add(ed => ed.DepreciationGroup, h => h.Visible(false))
                    .Add(ed => ed.AccountLedgerLUS, h => h.Visible(false))
                    .Add(ed => ed.SyntheticAccount, h => h.Visible(false))
                    .Add(ed => ed.OKOF, h => h.Visible(false))
                    .Add(ed => ed.GetByRestruct, h => h.Visible(false))
                    .Add(ed => ed.GetFromInterdependent, h => h.Visible(false))
                    .Add(ed => ed.RegDate, h => h.Visible(false))
                    .Add(ed => ed.FactorK, h => h.Visible(false))
                    .Add(ed => ed.IncludeCadRegDate, h => h.Visible(false))
                    .Add(ed => ed.IncludeCadRegDoc, h => h.Visible(false))
                    .Add(ed => ed.UntaxedAnnualCostAvg, h => h.Visible(false))
                    .Add(ed => ed.LandCategory, h => h.Visible(false))
                    .Add(ed => ed.CadRegDate, h => h.Visible(false))
                    .Add(ed => ed.ShareTaxPayerNumerator, h => h.Visible(false))
                    .Add(ed => ed.ShareTaxPayerDenominator, h => h.Visible(false))
                    .Add(ed => ed.CountFullMonthsLand, h => h.Visible(false))
                    .Add(ed => ed.TaxExemptionStartDateLand, h => h.Visible(false))
                    .Add(ed => ed.TaxExemptionEndDateLand, h => h.Visible(false))
                    .Add(ed => ed.TaxDeduction, h => h.Visible(false))
                    .Add(ed => ed.TaxDeductionSum, h => h.Visible(false))
                    .Add(ed => ed.InOtherSystem, h => h.Visible(false))
                    .Add(ed => ed.InitialCost, h => h.Visible(false))
                    .Add(ed => ed.Hidden, h => h.Visible(false))
                    .Add(ed => ed.SortOrder, h => h.Visible(false))
                    .Add(ed => ed.RowVersion, h => h.Visible(false))
                    .Add(ed => ed.CadastralValueQuarter1, h => h.Visible(false))
                    .Add(ed => ed.CadastralValueQuarter2, h => h.Visible(false))
                    .Add(ed => ed.CadastralValueQuarter3, h => h.Visible(false))
                    .Add(ed => ed.TaxBaseValueQuarter1, h => h.Visible(false))
                    .Add(ed => ed.TaxBaseValueQuarter2, h => h.Visible(false))
                    .Add(ed => ed.TaxBaseValueQuarter3, h => h.Visible(false))
                    .Add(ed => ed.TaxRateQuarter1, h => h.Visible(false))
                    .Add(ed => ed.TaxRateQuarter2, h => h.Visible(false))
                    .Add(ed => ed.TaxRateQuarter3, h => h.Visible(false))
                    .Add(ed => ed.TaxSumYearQuarter1, h => h.Visible(false))
                    .Add(ed => ed.TaxSumYearQuarter2, h => h.Visible(false))
                    .Add(ed => ed.TaxSumYearQuarter3, h => h.Visible(false))
                    .Add(ed => ed.TaxLowSumQuarter1, h => h.Visible(false))
                    .Add(ed => ed.TaxLowSumQuarter2, h => h.Visible(false))
                    .Add(ed => ed.TaxLowSumQuarter3, h => h.Visible(false))
                    .Add(ed => ed.TaxExemptionFreeSumQuarter1, h => h.Visible(false))
                    .Add(ed => ed.TaxExemptionFreeSumQuarter2, h => h.Visible(false))
                    .Add(ed => ed.TaxExemptionFreeSumQuarter3, h => h.Visible(false))
                    .Add(ed => ed.FactorKv1, h => h.Visible(false).EditorTemplate("Sib_Decimal4"))
                    .Add(ed => ed.FactorKv2, h => h.Visible(false).EditorTemplate("Sib_Decimal4"))
                    .Add(ed => ed.FactorKv3, h => h.Visible(false).EditorTemplate("Sib_Decimal4"))
                    .Add(ed => ed.FactorKl1, h => h.Visible(false).EditorTemplate("Sib_Decimal4"))
                    .Add(ed => ed.FactorKl2, h => h.Visible(false).EditorTemplate("Sib_Decimal4"))
                    .Add(ed => ed.FactorKl3, h => h.Visible(false).EditorTemplate("Sib_Decimal4"))
                    .Add(ed => ed.FactorK1, h => h.Visible(false))
                    .Add(ed => ed.FactorK2, h => h.Visible(false))
                    .Add(ed => ed.FactorK3, h => h.Visible(false))
                    .Add(ed => ed.UntaxedAnnualCostAvgQuarter1, h => h.Visible(false))
                    .Add(ed => ed.UntaxedAnnualCostAvgQuarter2, h => h.Visible(false))
                    .Add(ed => ed.UntaxedAnnualCostAvgQuarter3, h => h.Visible(false))
               ))
               .ListView(lv => lv.Title("Расчет по транспорту")
               .Columns(cols => cols.Clear()
                    .Add(ed => ed.IFNS, h => h.Visible(true))
                    .Add(ed => ed.OKTMO, h => h.Visible(true))
                    .Add(ed => ed.VehicleKindCode, h => h.Visible(true))
                    .Add(ed => ed.OSNumber, h => h.Visible(true))
                    .Add(ed => ed.AccountingObjectName, h => h.Visible(true))
                    .Add(ed => ed.DateOfReceipt, h => h.Visible(true))
                    .Add(ed => ed.LeavingDate, h => h.Visible(true))
                    .Add(ed => ed.VehicleSerialNumber, h => h.Visible(true))
                    .Add(ed => ed.VehicleModel, h => h.Visible(true))
                    .Add(ed => ed.VehicleSignNumber, h => h.Visible(true))
                    .Add(ed => ed.VehicleRegDate, h => h.Visible(true))
                    .Add(ed => ed.VehicleDeRegDate, h => h.Visible(true))
                    .Add(ed => ed.TaxBaseValueTS, h => h.Visible(true))
                    .Add(ed => ed.TaxBaseMeasureTS, h => h.Visible(true))
                    .Add(ed => ed.EcoKlass, h => h.Visible(true))
                    .Add(ed => ed.CountOfYearsIssue, h => h.Visible(true))
                    .Add(ed => ed.VehicleYearOfIssue, h => h.Visible(true))
                    .Add(ed => ed.VehicleMonthOwn, h => h.Visible(true))
                    .Add(ed => ed.ShareRightNumerator, h => h.Visible(true))
                    .Add(ed => ed.ShareRightDenominator, h => h.Visible(true))
                    .Add(ed => ed.FactorKv, h => h.Visible(true).ClientTemplate("#= data.{0} != null ? kendo.toString(data.{0}, 'n4') : '' #"))
                    .Add(ed => ed.TaxRate, h => h.Visible(true))
                    .Add(ed => ed.InitialCost, h => h.Visible(true))
                    .Add(ed => ed.VehicleTaxFactor, h => h.Visible(true))
                    .Add(ed => ed.TaxSumYear, h => h.Visible(true))
                    .Add(ed => ed.TaxExemptionStartDate, h => h.Visible(true))
                    .Add(ed => ed.TaxExemptionEndDate, h => h.Visible(true))
                    .Add(ed => ed.CountFullMonthsBenefit, h => h.Visible(true))
                    .Add(ed => ed.FactorKl, h => h.Visible(true).ClientTemplate("#= data.{0} != null ? kendo.toString(data.{0}, 'n4') : '' #"))
                    .Add(ed => ed.TaxExemptionFree, h => h.Visible(true))
                    .Add(ed => ed.TaxExemptionFreeSum, h => h.Visible(true))
                    .Add(ed => ed.TaxLow, h => h.Visible(true))
                    .Add(ed => ed.TaxLowSum, h => h.Visible(true))
                    .Add(ed => ed.TaxLowerPercent, h => h.Visible(true))
                    .Add(ed => ed.TaxExemptionLow, h => h.Visible(true))
                    .Add(ed => ed.TaxRateWithExemption, h => h.Visible(true))
                    .Add(ed => ed.TaxExemptionLowSum, h => h.Visible(true))
                    .Add(ed => ed.CalcSum, h => h.Visible(true))
                    .Add(ed => ed.PrepaymentSumFirstQuarter, h => h.Visible(true))
                    .Add(ed => ed.PrepaymentSumSecondQuarter, h => h.Visible(true))
                    .Add(ed => ed.PrepaymentSumThirdQuarter, h => h.Visible(true))
                    .Add(ed => ed.PaymentTaxSum, h => h.Visible(true))
                    .Add(ed => ed.EUSINumber, h => h.Visible(true))
                    .Add(ed => ed.CadastralNumber, h => h.Visible(false))
                    .Add(ed => ed.CadastralValue, h => h.Visible(false))
                    .Add(ed => ed.TaxBaseID, h => h.Visible(false))
                    .Add(ed => ed.TaxBaseValue, h => h.Visible(false))
                    .Add(ed => ed.ResidualCost_01, h => h.Visible(false))
                    .Add(ed => ed.ResidualCost_02, h => h.Visible(false))
                    .Add(ed => ed.ResidualCost_03, h => h.Visible(false))
                    .Add(ed => ed.ResidualCost_04, h => h.Visible(false))
                    .Add(ed => ed.ResidualCost_05, h => h.Visible(false))
                    .Add(ed => ed.ResidualCost_06, h => h.Visible(false))
                    .Add(ed => ed.ResidualCost_07, h => h.Visible(false))
                    .Add(ed => ed.ResidualCost_08, h => h.Visible(false))
                    .Add(ed => ed.ResidualCost_09, h => h.Visible(false))
                    .Add(ed => ed.ResidualCost_10, h => h.Visible(false))
                    .Add(ed => ed.ResidualCost_11, h => h.Visible(false))
                    .Add(ed => ed.ResidualCost_12, h => h.Visible(false))
                    .Add(ed => ed.ResidualCost_13, h => h.Visible(false))
                    .Add(ed => ed.ResidualCost_14, h => h.Visible(false))
                    .Add(ed => ed.Year, h => h.Visible(true))
                    .Add(ed => ed.CalculateDate, h => h.Visible(true))
                    .Add(ed => ed.TaxSumWithPrivilege, h => h.Visible(false))
                    .Add(ed => ed.AvgPriceFirstQuarter, h => h.Visible(false))
                    .Add(ed => ed.AvgPriceSecondQuarter, h => h.Visible(false))
                    .Add(ed => ed.AvgPriceThirdQuarter, h => h.Visible(false))
                    .Add(ed => ed.AvgPriceYear, h => h.Visible(false))
                    .Add(ed => ed.CalculationDatasource, h => h.Visible(false))
                    .Add(ed => ed.IsCadastralCost, h => h.Visible(false))
                    .Add(ed => ed.AccountingObjectID, h => h.Visible(false))
                    .Add(ed => ed.CalculatingRecordID, h => h.Visible(false))
                    .Add(ed => ed.DeclarationID, h => h.Visible(false))
                    .Add(ed => ed.EstateKindCode, h => h.Visible(false))
                    .Add(ed => ed.TaxExemption, h => h.Visible(false))
                    .Add(ed => ed.TaxExemptionFreeLand, h => h.Visible(false))
                    .Add(ed => ed.TaxExemptionFreeSumLand, h => h.Visible(false))
                    .Add(ed => ed.PrepaymentSumYear, h => h.Visible(false))
                    .Add(ed => ed.TaxReportPeriodID, h => h.Visible(false))
                    .Add(ed => ed.ConsolidationID, h => h.Visible(false))
                    .Add(ed => ed.Share, h => h.Visible(false))
                    .Add(ed => ed.BusinessArea, h => h.Visible(false))
                    .Add(ed => ed.ExternalID, h => h.Visible(false))
                    .Add(ed => ed.SubNumber, h => h.Visible(false))
                    .Add(ed => ed.IsEstateMovable, h => h.Visible(false))
                    .Add(ed => ed.InventoryNumber, h => h.Visible(false))
                    .Add(ed => ed.DepreciationGroup, h => h.Visible(false))
                    .Add(ed => ed.AccountLedgerLUS, h => h.Visible(false))
                    .Add(ed => ed.SyntheticAccount, h => h.Visible(false))
                    .Add(ed => ed.OKOF, h => h.Visible(false))
                    .Add(ed => ed.GetByRestruct, h => h.Visible(false))
                    .Add(ed => ed.GetFromInterdependent, h => h.Visible(false))
                    .Add(ed => ed.RegDate, h => h.Visible(false))
                    .Add(ed => ed.FactorK, h => h.Visible(false))
                    .Add(ed => ed.IncludeCadRegDate, h => h.Visible(false))
                    .Add(ed => ed.IncludeCadRegDoc, h => h.Visible(false))
                    .Add(ed => ed.UntaxedAnnualCostAvg, h => h.Visible(false))
                    .Add(ed => ed.LandCategory, h => h.Visible(false))
                    .Add(ed => ed.CadRegDate, h => h.Visible(false))
                    .Add(ed => ed.ShareTaxPayerNumerator, h => h.Visible(false))
                    .Add(ed => ed.ShareTaxPayerDenominator, h => h.Visible(false))
                    .Add(ed => ed.CountFullMonthsLand, h => h.Visible(false))
                    .Add(ed => ed.TaxExemptionStartDateLand, h => h.Visible(false))
                    .Add(ed => ed.TaxExemptionEndDateLand, h => h.Visible(false))
                    .Add(ed => ed.TaxDeduction, h => h.Visible(false))
                    .Add(ed => ed.TaxDeductionSum, h => h.Visible(false))
                    .Add(ed => ed.InOtherSystem, h => h.Visible(false))
                    .Add(ed => ed.Hidden, h => h.Visible(false))
                    .Add(ed => ed.SortOrder, h => h.Visible(false))
                    .Add(ed => ed.RowVersion, h => h.Visible(false))
                    .Add(ed => ed.CadastralValueQuarter1, h => h.Visible(false))
                    .Add(ed => ed.CadastralValueQuarter2, h => h.Visible(false))
                    .Add(ed => ed.CadastralValueQuarter3, h => h.Visible(false))
                    .Add(ed => ed.TaxBaseValueQuarter1, h => h.Visible(false))
                    .Add(ed => ed.TaxBaseValueQuarter2, h => h.Visible(false))
                    .Add(ed => ed.TaxBaseValueQuarter3, h => h.Visible(false))
                    .Add(ed => ed.TaxRateQuarter1, h => h.Visible(false))
                    .Add(ed => ed.TaxRateQuarter2, h => h.Visible(false))
                    .Add(ed => ed.TaxRateQuarter3, h => h.Visible(false))
                    .Add(ed => ed.TaxSumYearQuarter1, h => h.Visible(false))
                    .Add(ed => ed.TaxSumYearQuarter2, h => h.Visible(false))
                    .Add(ed => ed.TaxSumYearQuarter3, h => h.Visible(false))
                    .Add(ed => ed.TaxLowSumQuarter1, h => h.Visible(false))
                    .Add(ed => ed.TaxLowSumQuarter2, h => h.Visible(false))
                    .Add(ed => ed.TaxLowSumQuarter3, h => h.Visible(false))
                    .Add(ed => ed.TaxExemptionFreeSumQuarter1, h => h.Visible(false))
                    .Add(ed => ed.TaxExemptionFreeSumQuarter2, h => h.Visible(false))
                    .Add(ed => ed.TaxExemptionFreeSumQuarter3, h => h.Visible(false))
                    .Add(ed => ed.FactorKv1, h => h.Visible(false).ClientTemplate("#= data.{0} != null ? kendo.toString(data.{0}, 'n4') : '' #"))
                    .Add(ed => ed.FactorKv2, h => h.Visible(false).ClientTemplate("#= data.{0} != null ? kendo.toString(data.{0}, 'n4') : '' #"))
                    .Add(ed => ed.FactorKv3, h => h.Visible(false).ClientTemplate("#= data.{0} != null ? kendo.toString(data.{0}, 'n4') : '' #"))
                    .Add(ed => ed.FactorKl1, h => h.Visible(false).ClientTemplate("#= data.{0} != null ? kendo.toString(data.{0}, 'n4') : '' #"))
                    .Add(ed => ed.FactorKl2, h => h.Visible(false).ClientTemplate("#= data.{0} != null ? kendo.toString(data.{0}, 'n4') : '' #"))
                    .Add(ed => ed.FactorKl3, h => h.Visible(false).ClientTemplate("#= data.{0} != null ? kendo.toString(data.{0}, 'n4') : '' #"))
                    .Add(ed => ed.FactorK1, h => h.Visible(false))
                    .Add(ed => ed.FactorK2, h => h.Visible(false))
                    .Add(ed => ed.FactorK3, h => h.Visible(false))
                    .Add(ed => ed.UntaxedAnnualCostAvgQuarter1, h => h.Visible(false))
                    .Add(ed => ed.UntaxedAnnualCostAvgQuarter2, h => h.Visible(false))
                    .Add(ed => ed.UntaxedAnnualCostAvgQuarter3, h => h.Visible(false))
               ))
               .IsReadOnly();

            context.CreateVmConfig<CalculatingError>()
                .Service<CalculatingErrorService>()
                .Title("Ошибки при расчетах")
                .ListView(builder => builder.Title("Ошибки при расчетах"))
                .DetailView(builder => builder.Title("Ошибки при расчетах"))
                .LookupProperty(l => l.Text(t => t.ID)
                );

            context.CreateVmConfig<CalculatingRecord>()
                .Service<CalculatingRecordService>()
                .Title("Реестр расчетов")
                .ListView(builder => builder.Title("Реестр расчетов"))
                .DetailView(builder => builder.Title("Реестр расчетов")
                .Editors(e => e
                            .Add(a => a.Result, h => h.IsReadOnly().Visible(true))
                            .Add(a => a.CalculatingDate, h => h.IsReadOnly().Visible(true))
                            .Add(a => a.Initiator, h => h.IsReadOnly().Visible(true))
                            .Add(a => a.Year, h => h.IsRequired(true).Visible(true))
                            .Add(a => a.Consolidation, h => h.Visible(true).IsRequired(true))
                            .Add(a => a.PeriodCalculatedNU, h => h.Visible(true).IsRequired(true))
                            .Add(a => a.PositionConsolidation, h => h.Visible(false).IsRequired(false))
                            .Add(a => a.TaxRateType, h => h.Visible(false).IsRequired(false))
                .AddOneToManyAssociation<AccountingCalculatedField>("CalculatingRecord_AccountingCalculatedFieldOI",
                        editor => editor
                        .TabName("[012]Расчеты")
                        .Mnemonic("AccountingCalculatedFieldOI")
                        .IsReadOnly()
                        .Title("Расчеты")
                        .IsLabelVisible(false)
                        .Filter((uofw, q, id, oid) =>
                        q.Where(w => w.CalculatingRecordID == id)
                        ))
                .AddOneToManyAssociation<AccountingCalculatedField>("CalculatingRecord_AccountingCalculatedFieldLand",
                        editor => editor
                        .TabName("[012]Расчеты")
                        .Mnemonic("AccountingCalculatedFieldLand")
                        .IsReadOnly()
                        .Title("Расчеты")
                        .IsLabelVisible(false)
                        .Filter((uofw, q, id, oid) =>
                        q.Where(w => w.CalculatingRecordID == id)
                        ))
                .AddOneToManyAssociation<AccountingCalculatedField>("CalculatingRecord_AccountingCalculatedFieldTS",
                        editor => editor
                        .TabName("[012]Расчеты")
                        .Mnemonic("AccountingCalculatedFieldTS")
                        .IsReadOnly()
                        .Title("Расчеты")
                        .IsLabelVisible(false)
                        .Filter((uofw, q, id, oid) =>
                        q.Where(w => w.CalculatingRecordID == id)
                        ))
                .AddOneToManyAssociation<CalculatingError>("CalculatingRecord_CalculatingError",
                        editor => editor
                        .TabName("[013]Ошибки")
                        .IsReadOnly()
                        .Title("Ошибки")
                        .IsLabelVisible(false)
                        .Filter((uofw, q, id, oid) =>
                        q.Where(w => w.CalculatingRecordID == id)
                        ))
                )
                    .DefaultSettings((uow, r, commonEditorViewModel) =>
                    {
                        if (!string.IsNullOrEmpty(r.Result))
                        {
                            commonEditorViewModel.SetReadOnlyAll();
                            var taxRateType = context.UnitOfWork.GetRepository<CorpProp.Entities.NSI.TaxRateType>().Find(f => f.ID == r.TaxRateTypeID);
                            commonEditorViewModel.Visible(p => p.TaxRateType, true);
                            commonEditorViewModel.Visible("CalculatingRecord_AccountingCalculatedFieldOI", false);
                            commonEditorViewModel.Visible("CalculatingRecord_AccountingCalculatedFieldLand", false);
                            commonEditorViewModel.Visible("CalculatingRecord_AccountingCalculatedFieldTS", false);
                            if (taxRateType != null && taxRateType.Code == "101")
                                commonEditorViewModel.Visible("CalculatingRecord_AccountingCalculatedFieldOI", true);
                            if (taxRateType != null && taxRateType.Code == "102")
                                commonEditorViewModel.Visible("CalculatingRecord_AccountingCalculatedFieldLand", true);
                            if (taxRateType != null && taxRateType.Code == "103")
                                commonEditorViewModel.Visible("CalculatingRecord_AccountingCalculatedFieldTS", true);
                        }
                        else
                        {
                            commonEditorViewModel.Visible("CalculatingRecord_CalculatingError", false);
                            //commonEditorViewModel.Visible("CalculatingRecord_AccountingCalculatedField", false);
                            commonEditorViewModel.Visible("CalculatingRecord_AccountingCalculatedFieldOI", false);
                            commonEditorViewModel.Visible("CalculatingRecord_AccountingCalculatedFieldLand", false);
                            commonEditorViewModel.Visible("CalculatingRecord_AccountingCalculatedFieldTS", false);
                            commonEditorViewModel.Visible(p => p.CalculatingDate, false);
                            commonEditorViewModel.Visible(p => p.Result, false);
                            commonEditorViewModel.Visible(p => p.Initiator, false);
                        }
                    }))
                .LookupProperty(l => l.Text(t => t.ID)
                );

            context.CreateVmConfigOnBase<CalculatingRecord>(nameof(CalculatingRecord), "CalculatingRecordInventory")
                .Title("Реестр расчетов (Налог на имущество организаций)")
                .ListView(lv => lv
                    .Title("Реестр расчетов (Налог на имущество организаций)")
                    .DataSource(ds => ds.Filter(f => !f.Hidden && (f.TaxRateType != null && f.TaxRateType.Code == "101")))
                );

            context.CreateVmConfigOnBase<CalculatingRecord>(nameof(CalculatingRecord), "CalculatingRecordLand")
                .Title("Реестр расчетов (Земельный налог)")
                .ListView(lv => lv
                    .Title("Реестр расчетов (Земельный налог)")
                    .DataSource(ds => ds.Filter(f => !f.Hidden && (f.TaxRateType != null && f.TaxRateType.Code == "102")))
                );
            context.CreateVmConfigOnBase<CalculatingRecord>(nameof(CalculatingRecord), "CalculatingRecordTransport")
                .Title("Реестр расчетов (Транспортный налог)")
                .ListView(lv => lv
                    .Title("Реестр расчетов (Транспортный налог/Налог на имущество)")
                    .DataSource(ds => ds.Filter(f => !f.Hidden && (f.TaxRateType != null && f.TaxRateType.Code == "103")))
                );


            context.CreateVmConfig<ExternalImportLog>()
                .Service<IExternalImportLogService>()
                .Title("Журнал результатов загрузки данных")
                //.IsReadOnly()
                .ListView(builder => builder
                    .Columns(col => col
                        .Add(a => a.Society,
                            h => h.Visible(true).Title("ОГ, направившее журнал загрузки в ЕУСИ"))
                        .Add(a => a.EUSINumber,
                            h => h.Visible(true).Title("Идентификатор объекта имущества в ИР ЕУСИ"))
                        .Add(a => a.ExternalImportDateTime,
                            h => h.Visible(true).Title("Дата и время загрузки данных в БУС (ИСУП РН)").DataType(PropertyDataType.DateTime))
                        .Add(a => a.ExternalImportDate,
                            h => h.Visible(false).Title("Время загрузки данных в БУС (ИСУП РН)").DataType(PropertyDataType.Time))
                        .Add(a => a.IsSuccess, h => h.Visible(true).Title("Загрузка прошла успешно"))
                        .Add(a => a.ImportDate, h => h.Visible(true).Title("Дата и время импорта в ЕУСИ"))
                    )
                    .Title("Журнал результатов загрузки данных")
                    .DataSource(ds => ds.Filter(f => !f.Hidden))
                )
                .DetailView(builder => builder
                    .Title("Журнал результатов загрузки данных")
                    .Editors(edt => edt
                        .Add(a => a.Society,
                            h => h.Visible(true).Title("ОГ, направившее журнал загрузки в ЕУСИ"))
                        .Add(a => a.EUSINumber,
                            h => h.Visible(true).Title("Идентификатор объекта имущества в ИР ЕУСИ").DataType(PropertyDataType.Text))
                        .Add(a => a.ExternalImportDate,
                            h => h.Visible(true).IsReadOnly().Title("Дата загрузки данных в БУС (ИСУП РН)")
                                .DataType(PropertyDataType.Date))
                        .Add(a => a.ExternalImportDateTime,
                            h => h.Visible(true).IsReadOnly().Title("Время загрузки данных в БУС (ИСУП РН)")
                                .DataType(PropertyDataType.Time))
                        .Add(a => a.IsSuccess, h => h.Visible(true).Title("Загрузка прошла успешно"))
                        .Add(a => a.ImportDate, h => h.Visible(true).Title("Дата импорта в ЕУСИ"))
                    )
                    .DefaultSettings((uof, entity, commonEditorViewModel) =>
                    {
                        commonEditorViewModel.SetReadOnlyAll();
                    })
                )
                .LookupProperty(lp => lp.Text(t => t.ID))
                ;



            context.CreateVmConfig<BalanceReconciliationReport>()
                .Service<IBalanceReconciliationReportService>()
                .Title("Протоколы сверки сальдо")
                .ListView(builder => builder
                    .Columns(col => col
                        .Add(a => a.PositionConsolidation)
                        .Add(a => a.Consolidation)
                        .Add(a => a.Period)))
                .DetailView(builder => builder
                    .Title("Протокол сверки сальдо")
                    .Editors(edt => edt
                        .Add(a => a.Consolidation)
                        .Add(a => a.PositionConsolidation)
                        .Add(a => a.Period)
                        .Add(a => a.AdditionalAnalitics_1)
                        .Add(a => a.AdditionalAnalitics_2)
                        .Add(a => a.StartPeriodPriceRSBU)
                        .Add(a => a.EndPeriodPriceRSBU)
                        .Add(a => a.StartPeriodWearRSBU)
                        .Add(a => a.EndPeriodWearRSBU)))
                .LookupProperty(lp => lp.Text(t => t.ID))
                ;
        }
    }
}
