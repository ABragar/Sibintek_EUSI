//------------------------------------------------------------------------------
//<auto-generated>
//  This file is auto-generated by WebApiProxy
//  Project site: http://github.com/faniereynders/webapiproxy
//  
//  Any changes to this file will be overwritten
//</auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Net.Http;
using System.Net.Http.Headers;
using System.Threading.Tasks;
using System.Net.Http.Formatting;
using System.Linq;
using System.Net;
using System.Web;
using Base.Attributes;
using WebApi.Proxies.Models;

#region Proxies
namespace WebApi.Proxies
{
	/// <summary>
	/// Client configuration.
	/// </summary>
	public static partial class Configuration
	{
		/// <summary>
		/// Web Api Base Address.
		/// </summary>
		public static string MyWebApiProxyBaseAddress = "http://project.pba.su/";
	}
}
#endregion

#region Models
namespace WebApi.Proxies.Models
{
	public class WebApiProxyResponseException : Exception
	{
		public HttpStatusCode StatusCode { get; private set; }
		public string Content { get; private set; }

		public WebApiProxyResponseException(HttpStatusCode statusCode, string content) : base("A " + statusCode + " (" + (int)statusCode + ") http exception occured. See Content for response body.")
		{
			StatusCode = statusCode;
			Content = content;
		}
	}

	
	/// <summary>
	/// 
	/// </summary>
	public partial class AccountAlias
	{
		#region Constants
		#endregion

		#region Properties
		/// <summary>
		/// 
		/// </summary>
		public virtual String Name { get; set; }
		#endregion
	}	
	
	/// <summary>
	/// 
	/// </summary>
	public partial class AccountDetailModel
	{
		#region Constants
		#endregion

		#region Properties
		/// <summary>
		/// 
		/// </summary>
		public virtual AccountAlias[] AliasList { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String[] ForwardingList { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Int64 Size { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String AccountId { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String Name { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Nullable<AccountStatus> Status { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Nullable<DateTime> CreatedDate { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Nullable<DateTime> LastLogonDate { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Int64 Quota { get; set; }
		#endregion
	}	
	
	/// <summary>
	/// 
	/// </summary>
	public partial class AccountListModel
	{
		#region Constants
		#endregion

		#region Properties
		/// <summary>
		/// 
		/// </summary>
		public virtual String AccountId { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String Name { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Nullable<AccountStatus> Status { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Nullable<DateTime> CreatedDate { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Nullable<DateTime> LastLogonDate { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Int64 Quota { get; set; }
		#endregion
	}	
	
	/// <summary>
	/// 
	/// </summary>
	public partial class ClientDescription
	{
		#region Constants
		#endregion

		#region Properties
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32 ClientId { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String Address { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String Name { get; set; }
		#endregion
	}	
	
	/// <summary>
	/// 
	/// </summary>
	public partial class CreateAccountModel
	{
		#region Constants
		#endregion

		#region Properties
		/// <summary>
		/// 
		/// </summary>
		public virtual String Name { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String Password { get; set; }
		#endregion
	}	
	
	/// <summary>
	/// 
	/// </summary>
	public partial class GetCountModel
	{
		#region Constants
		#endregion

		#region Properties
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32 Count { get; set; }
		#endregion
	}	
	
	/// <summary>
	/// 
	/// </summary>
	public partial class LoadAttachmentModel
	{
		#region Constants
		#endregion

		#region Properties
		/// <summary>
		/// 
		/// </summary>
		public virtual String FolderId { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Int64 UniqueId { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String FileId { get; set; }
		#endregion
	}	
	
	/// <summary>
	/// 
	/// </summary>
	public partial class MailActionModel<T>
	{
		#region Constants
		#endregion

		#region Properties
		/// <summary>
		/// 
		/// </summary>
		public virtual Int64[] Messages { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual T Value { get; set; }
		#endregion
	}	
	
	/// <summary>
	/// 
	/// </summary>
	public partial class MailFolderModel
	{
		#region Constants
		#endregion

		#region Properties
		/// <summary>
		/// 
		/// </summary>
		public virtual String ParentId { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String FolderId { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String Title { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32 SortOrder { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual MailFolderType Type { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32 UnreadCount { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32 TotalCount { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Int32 RecentCount { get; set; }
		#endregion
	}	
	
	/// <summary>
	/// 
	/// </summary>
	public partial class MailMessageDetailModel
	{
		#region Constants
		#endregion

		#region Properties
		/// <summary>
		/// 
		/// </summary>
		public virtual String Subject { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String Body { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Boolean IsHtmlBody { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String FolderId { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Int64 UniqueId { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual DateTime Date { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Recipient From { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual IReadOnlyCollection<Recipient> To { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual IReadOnlyCollection<Recipient> Cc { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual IReadOnlyCollection<Recipient> Bcc { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual IReadOnlyCollection<MessageAttachmentModel> Attachments { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Boolean IsRead { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Boolean IsFlag { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Boolean IsDraft { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Boolean IsSend { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Boolean IsDeleted { get; set; }
		#endregion
	}	
	
	/// <summary>
	/// 
	/// </summary>
	public partial class MailMessageListModel
	{
		#region Constants
		#endregion

		#region Properties
		/// <summary>
		/// 
		/// </summary>
		public virtual String FolderId { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Int64 UniqueId { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual DateTime Date { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String Subject { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Recipient From { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String BodyPreview { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual IReadOnlyCollection<Recipient> To { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual IReadOnlyCollection<Recipient> Cc { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual IReadOnlyCollection<Recipient> Bcc { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Boolean HasAttachments { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Boolean IsRead { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Boolean IsFlag { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Boolean IsDraft { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Boolean IsSend { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Boolean IsDeleted { get; set; }
		#endregion
	}	
	
	/// <summary>
	/// 
	/// </summary>
	public partial class MessageAttachmentModel
	{
		#region Constants
		#endregion

		#region Properties
		/// <summary>
		/// 
		/// </summary>
		public virtual String FileId { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String FileName { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Int64 FileSize { get; set; }
		#endregion
	}	
	
	/// <summary>
	/// 
	/// </summary>
	public partial class PageResult<T>
	{
		#region Constants
		#endregion

		#region Properties
		/// <summary>
		/// 
		/// </summary>
		public virtual Nullable<Int32> TotalCount { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual IReadOnlyCollection<T> Items { get; set; }
		#endregion
	}	
	
	/// <summary>
	/// 
	/// </summary>
	public partial class Recipient
	{
		#region Constants
		#endregion

		#region Properties
		/// <summary>
		/// 
		/// </summary>
		public virtual String Name { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String Address { get; set; }
		#endregion
	}	
	
	/// <summary>
	/// 
	/// </summary>
	public partial class SaveMessageModel
	{
		#region Constants
		#endregion

		#region Properties
		/// <summary>
		/// 
		/// </summary>
		public virtual String Subject { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual String Body { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual Boolean IsHtmlBody { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual IReadOnlyCollection<Recipient> To { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual IReadOnlyCollection<Recipient> Cc { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual IReadOnlyCollection<Recipient> Bcc { get; set; }
		#endregion
	}	
	
	/// <summary>
	/// 
	/// </summary>
	public partial class SaveMessageResultModel
	{
		#region Constants
		#endregion

		#region Properties
		/// <summary>
		/// 
		/// </summary>
		public virtual Int64 UniqueId { get; set; }
		/// <summary>
		/// 
		/// </summary>
		public virtual DateTime Date { get; set; }
		#endregion
	}	
	
	/// <summary>
	/// 
	/// </summary>
	public partial class SetAccountStatusModel
	{
		#region Constants
		#endregion

		#region Properties
		/// <summary>
		/// 
		/// </summary>
		public virtual AccountStatus Status { get; set; }
		#endregion
	}	
	
	/// <summary>
	/// 
	/// </summary>
	public partial class SetForwardingListModel
	{
		#region Constants
		#endregion

		#region Properties
		/// <summary>
		/// 
		/// </summary>
		public virtual String[] ForwardingList { get; set; }
		#endregion
	}	
	
	/// <summary>
	/// 
	/// </summary>
	public partial class SetNameModel
	{
		#region Constants
		#endregion

		#region Properties
		/// <summary>
		/// 
		/// </summary>
		public virtual String Name { get; set; }
		#endregion
	}	
	
	/// <summary>
	/// 
	/// </summary>
	public partial class SetPasswordModel
	{
		#region Constants
		#endregion

		#region Properties
		/// <summary>
		/// 
		/// </summary>
		public virtual String Password { get; set; }
		#endregion
	}	
	
	/// <summary>
	/// 
	/// </summary>
	public partial class SetQuotaModel
	{
		#region Constants
		#endregion

		#region Properties
		/// <summary>
		/// 
		/// </summary>
		public virtual Int64 Quota { get; set; }
		#endregion
	}	

	
	/// <summary>
	/// 
	/// </summary>
	[UiEnum]
	public enum AccountStatus
	{
        [UiEnumValue]
        /// <summary>
        /// 
        /// </summary>
        Active = 0,
        [UiEnumValue]
        /// <summary>
        /// 
        /// </summary>
        Closed = 1,
        [UiEnumValue]
        /// <summary>
        /// 
        /// </summary>
        Locked = 2,
		
	}
	
	/// <summary>
	/// 
	/// </summary>
	public enum MailFolderType
	{

		/// <summary>
		/// 
		/// </summary>
		Inbox = 0,

		/// <summary>
		/// 
		/// </summary>
		None = 1,

		/// <summary>
		/// 
		/// </summary>
		Flagged = 2,

		/// <summary>
		/// 
		/// </summary>
		Sent = 3,

		/// <summary>
		/// 
		/// </summary>
		All = 4,

		/// <summary>
		/// 
		/// </summary>
		Archive = 5,

		/// <summary>
		/// 
		/// </summary>
		Drafts = 6,

		/// <summary>
		/// 
		/// </summary>
		Junk = 7,

		/// <summary>
		/// 
		/// </summary>
		Trash = 8,
		
	}
	
}
#endregion

#region Interfaces
namespace WebApi.Proxies.Interfaces
{
	public interface IClientBase : IDisposable
	{
		HttpClient HttpClient { get; }
	}

	
	public partial interface IAccountClient : IClientBase
	{	


		/// <returns></returns>
		Task<HttpResponseMessage> GetClientsAsync();

		/// <returns></returns>
		IReadOnlyCollection<ClientDescription> GetClients();
				
	}
	
	public partial interface IAdminClient : IClientBase
	{	

		/// <param name="search"></param>
		/// <param name="take"></param>
		/// <param name="skip"></param>

		/// <returns></returns>
		Task<HttpResponseMessage> SearchAccountsAsync(String search,Int32 take,Int32 skip);

		/// <param name="search"></param>
		/// <param name="take"></param>
		/// <param name="skip"></param>
		/// <returns></returns>
		IReadOnlyCollection<AccountListModel> SearchAccounts(String search,Int32 take,Int32 skip);

		/// <param name="search"></param>
		/// <param name="take"></param>
		/// <param name="skip"></param>

		/// <returns></returns>
		Task<HttpResponseMessage> GetCountAsync(String search,Int32 take,Int32 skip);

		/// <param name="search"></param>
		/// <param name="take"></param>
		/// <param name="skip"></param>
		/// <returns></returns>
		GetCountModel GetCount(String search,Int32 take,Int32 skip);

		/// <param name="account_id"></param>

		/// <returns></returns>
		Task<HttpResponseMessage> GetAccountAsync(String account_id);

		/// <param name="account_id"></param>
		/// <returns></returns>
		AccountDetailModel GetAccount(String account_id);

		/// <param name="name"></param>

		/// <returns></returns>
		Task<HttpResponseMessage> GetAccountByNameAsync(String name);

		/// <param name="name"></param>
		/// <returns></returns>
		AccountDetailModel GetAccountByName(String name);


		/// <returns></returns>
		Task<HttpResponseMessage> CreateAccountAsync(CreateAccountModel model);

		/// <returns></returns>
		AccountDetailModel CreateAccount(CreateAccountModel model);

		/// <param name="account_id"></param>

		/// <returns></returns>
		Task<HttpResponseMessage> AddAliasAsync(String account_id,AccountAlias model);

		/// <param name="account_id"></param>
		/// <returns></returns>
		void AddAlias(String account_id,AccountAlias model);

		/// <param name="account_id"></param>

		/// <returns></returns>
		Task<HttpResponseMessage> RemoveAliasAsync(String account_id,AccountAlias model);

		/// <param name="account_id"></param>
		/// <returns></returns>
		void RemoveAlias(String account_id,AccountAlias model);

		/// <param name="account_id"></param>

		/// <returns></returns>
		Task<HttpResponseMessage> SetPasswordAsync(String account_id,SetAccountStatusModel model);

		/// <param name="account_id"></param>
		/// <returns></returns>
		void SetPassword(String account_id,SetAccountStatusModel model);

		/// <param name="account_id"></param>

		/// <returns></returns>
		Task<HttpResponseMessage> SetPasswordAsync(String account_id,SetPasswordModel model);

		/// <param name="account_id"></param>
		/// <returns></returns>
		void SetPassword(String account_id,SetPasswordModel model);

		/// <param name="account_id"></param>

		/// <returns></returns>
		Task<HttpResponseMessage> SetForwardingListAsync(String account_id,SetForwardingListModel model);

		/// <param name="account_id"></param>
		/// <returns></returns>
		void SetForwardingList(String account_id,SetForwardingListModel model);

		/// <param name="account_id"></param>

		/// <returns></returns>
		Task<HttpResponseMessage> SetNameAsync(String account_id,SetNameModel model);

		/// <param name="account_id"></param>
		/// <returns></returns>
		void SetName(String account_id,SetNameModel model);

		/// <param name="account_id"></param>

		/// <returns></returns>
		Task<HttpResponseMessage> SetQuotaAsync(String account_id,SetQuotaModel model);

		/// <param name="account_id"></param>
		/// <returns></returns>
		void SetQuota(String account_id,SetQuotaModel model);
				
	}
	
	public partial interface IDraftClient : IClientBase
	{	

		/// <param name="client_id"></param>
		/// <param name="search"></param>
		/// <param name="take"></param>
		/// <param name="skip"></param>
		/// <param name="sended"></param>
		/// <param name="deleted"></param>

		/// <returns></returns>
		Task<HttpResponseMessage> SearchMessagesAsync(Int32 client_id,String search,Int32 take,Int32 skip,Nullable<Boolean> sended,Nullable<Boolean> deleted);

		/// <param name="client_id"></param>
		/// <param name="search"></param>
		/// <param name="take"></param>
		/// <param name="skip"></param>
		/// <param name="sended"></param>
		/// <param name="deleted"></param>
		/// <returns></returns>
		PageResult<MailMessageListModel> SearchMessages(Int32 client_id,String search,Int32 take,Int32 skip,Nullable<Boolean> sended,Nullable<Boolean> deleted);

		/// <param name="client_id"></param>

		/// <returns></returns>
		Task<HttpResponseMessage> CreateMessageAsync(Int32 client_id,SaveMessageModel model);

		/// <param name="client_id"></param>
		/// <returns></returns>
		SaveMessageResultModel CreateMessage(Int32 client_id,SaveMessageModel model);

		/// <param name="client_id"></param>
		/// <param name="unique_id"></param>

		/// <returns></returns>
		Task<HttpResponseMessage> EditMessageAsync(Int32 client_id,Int64 unique_id,SaveMessageModel model);

		/// <param name="client_id"></param>
		/// <param name="unique_id"></param>
		/// <returns></returns>
		SaveMessageResultModel EditMessage(Int32 client_id,Int64 unique_id,SaveMessageModel model);

		/// <param name="client_id"></param>
		/// <param name="unique_id"></param>

		/// <returns></returns>
		Task<HttpResponseMessage> SendAsync(Int32 client_id,Int64 unique_id);

		/// <param name="client_id"></param>
		/// <param name="unique_id"></param>
		/// <returns></returns>
		void Send(Int32 client_id,Int64 unique_id);

		/// <param name="client_id"></param>
		/// <param name="unique_id"></param>
		/// <param name="file_id"></param>

		/// <returns></returns>
		Task<HttpResponseMessage> GetAttachmentAsync(Int32 client_id,Int64 unique_id,String file_id);

		/// <param name="client_id"></param>
		/// <param name="unique_id"></param>
		/// <param name="file_id"></param>
		/// <returns></returns>
		HttpResponseMessage GetAttachment(Int32 client_id,Int64 unique_id,String file_id);

		/// <param name="client_id"></param>

		/// <returns></returns>
		Task<HttpResponseMessage> DeleteAsync(Int32 client_id,MailActionModel<Boolean> model);

		/// <param name="client_id"></param>
		/// <returns></returns>
		void Delete(Int32 client_id,MailActionModel<Boolean> model);

		/// <param name="client_id"></param>
		/// <param name="unique_id"></param>
		/// <param name="file_id"></param>

		/// <returns></returns>
		Task<HttpResponseMessage> RemoveAttachmentAsync(Int32 client_id,Int64 unique_id,String file_id);

		/// <param name="client_id"></param>
		/// <param name="unique_id"></param>
		/// <param name="file_id"></param>
		/// <returns></returns>
		void RemoveAttachment(Int32 client_id,Int64 unique_id,String file_id);

		/// <param name="client_id"></param>
		/// <param name="unique_id"></param>

		/// <returns></returns>
		Task<HttpResponseMessage> LoadAttachmentAsync(Int32 client_id,Int64 unique_id,LoadAttachmentModel model);

		/// <param name="client_id"></param>
		/// <param name="unique_id"></param>
		/// <returns></returns>
		MessageAttachmentModel LoadAttachment(Int32 client_id,Int64 unique_id,LoadAttachmentModel model);

		/// <param name="client_id"></param>
		/// <param name="unique_id"></param>

		/// <returns></returns>
		Task<HttpResponseMessage> UploadAttachmentsAsync(Int32 client_id,Int64 unique_id);

		/// <param name="client_id"></param>
		/// <param name="unique_id"></param>
		/// <returns></returns>
		List<MessageAttachmentModel> UploadAttachments(Int32 client_id,Int64 unique_id);

		/// <param name="client_id"></param>
		/// <param name="unique_id"></param>

		/// <returns></returns>
		Task<HttpResponseMessage> GetMessageAsync(Int32 client_id,Int64 unique_id);

		/// <param name="client_id"></param>
		/// <param name="unique_id"></param>
		/// <returns></returns>
		MailMessageDetailModel GetMessage(Int32 client_id,Int64 unique_id);
				
	}
	
	public partial interface IMailClient : IClientBase
	{	

		/// <param name="client_id"></param>

		/// <returns></returns>
		Task<HttpResponseMessage> GetFolderListAsync(Int32 client_id);

		/// <param name="client_id"></param>
		/// <returns></returns>
		IReadOnlyCollection<MailFolderModel> GetFolderList(Int32 client_id);

		/// <param name="client_id"></param>
		/// <param name="folder_id"></param>
		/// <param name="search"></param>
		/// <param name="take"></param>
		/// <param name="skip"></param>

		/// <returns></returns>
		Task<HttpResponseMessage> SearchMessagesAsync(Int32 client_id,String folder_id,String search,Int32 take,Int32 skip);

		/// <param name="client_id"></param>
		/// <param name="folder_id"></param>
		/// <param name="search"></param>
		/// <param name="take"></param>
		/// <param name="skip"></param>
		/// <returns></returns>
		PageResult<MailMessageListModel> SearchMessages(Int32 client_id,String folder_id,String search,Int32 take,Int32 skip);

		/// <param name="client_id"></param>
		/// <param name="folder_id"></param>

		/// <returns></returns>
		Task<HttpResponseMessage> MakeReadAsync(Int32 client_id,String folder_id,MailActionModel<Boolean> model);

		/// <param name="client_id"></param>
		/// <param name="folder_id"></param>
		/// <returns></returns>
		void MakeRead(Int32 client_id,String folder_id,MailActionModel<Boolean> model);

		/// <param name="client_id"></param>
		/// <param name="folder_id"></param>

		/// <returns></returns>
		Task<HttpResponseMessage> MakeFlagAsync(Int32 client_id,String folder_id,MailActionModel<Boolean> model);

		/// <param name="client_id"></param>
		/// <param name="folder_id"></param>
		/// <returns></returns>
		void MakeFlag(Int32 client_id,String folder_id,MailActionModel<Boolean> model);

		/// <param name="client_id"></param>
		/// <param name="folder_id"></param>

		/// <returns></returns>
		Task<HttpResponseMessage> MoveAsync(Int32 client_id,String folder_id,MailActionModel<String> model);

		/// <param name="client_id"></param>
		/// <param name="folder_id"></param>
		/// <returns></returns>
		void Move(Int32 client_id,String folder_id,MailActionModel<String> model);

		/// <param name="client_id"></param>
		/// <param name="folder_id"></param>
		/// <param name="unique_id"></param>
		/// <param name="file_id"></param>

		/// <returns></returns>
		Task<HttpResponseMessage> GetAttachmentAsync(Int32 client_id,String folder_id,Int64 unique_id,String file_id);

		/// <param name="client_id"></param>
		/// <param name="folder_id"></param>
		/// <param name="unique_id"></param>
		/// <param name="file_id"></param>
		/// <returns></returns>
		HttpResponseMessage GetAttachment(Int32 client_id,String folder_id,Int64 unique_id,String file_id);

		/// <param name="client_id"></param>
		/// <param name="folder_id"></param>
		/// <param name="unique_id"></param>

		/// <returns></returns>
		Task<HttpResponseMessage> GetMessageAsync(Int32 client_id,String folder_id,Int64 unique_id);

		/// <param name="client_id"></param>
		/// <param name="folder_id"></param>
		/// <param name="unique_id"></param>
		/// <returns></returns>
		MailMessageDetailModel GetMessage(Int32 client_id,String folder_id,Int64 unique_id);
				
	}
	
	public partial interface ITestClient : IClientBase
	{	


		/// <returns></returns>
		Task<HttpResponseMessage> GetAsync();

		/// <returns></returns>
		HttpResponseMessage Get();
				
	}

}
#endregion

#region Clients
namespace WebApi.Proxies.Clients
{
	/// <summary>
	/// Client base class.
	/// </summary>
	public abstract partial class ClientBase : IDisposable
	{
		/// <summary>
		/// Gests the HttpClient.
		/// </summary>
		public HttpClient HttpClient { get; protected set; }

		/// <summary>
		/// Initializes a new instance of the <see cref="ClientBase"/> class.
		/// </summary>
		protected ClientBase()
		{
			HttpClient = new HttpClient()
			{
				BaseAddress = new Uri(Configuration.MyWebApiProxyBaseAddress)
			};
		}
		
		/// <summary>
		/// Ensures that response has a valid (200 - OK) status code
		/// </summary>
		public virtual void EnsureSuccess(HttpResponseMessage response)
		{			
			if (response.IsSuccessStatusCode)				
				return;
													
			var content = response.Content.ReadAsStringAsync().Result;
			throw new WebApiProxyResponseException(response.StatusCode, content);			
		}

		/// <summary>
		/// Initializes a new instance of the <see cref="ClientBase"/> class.
		/// </summary>
		/// <param name="handler">The handler.</param>
		/// <param name="disposeHandler">if set to <c>true</c> [dispose handler].</param>
		protected ClientBase(HttpMessageHandler handler, bool disposeHandler = true)
		{
			HttpClient = new HttpClient(handler, disposeHandler)
			{
				BaseAddress = new Uri(Configuration.MyWebApiProxyBaseAddress)
			};
		}

		/// <summary>
		/// Encode the input parameter as a string
		/// </summary>
		protected string EncodeParam<T>(T value) 
		{
			return System.Net.WebUtility.UrlEncode(value.ToString());
		}
		
		/// <summary>
		/// Encode the input parameter as a string
		/// </summary>
		protected string EncodeParam(DateTime value) 
		{
			return System.Net.WebUtility.UrlEncode(value.ToString("s"));
		}
		
		/// <summary>
		/// Encode the input parameter as a string
		/// </summary>
		protected string EncodeParam(DateTimeOffset value)
		{
			return System.Net.WebUtility.UrlEncode(value.ToString("s"));
		}
		
		/// <summary>
		/// Releases the unmanaged resources and disposes of the managed resources.       
		/// </summary>
		protected virtual void Dispose(bool disposing)
		{
			if (disposing && HttpClient != null)
			{
				HttpClient.Dispose();
				HttpClient = null;
			}
		}
		
		/// <summary>
		/// Releases the unmanaged resources and disposes of the managed resources.       
		/// </summary>
		public void Dispose()
		{
			Dispose(true);
			GC.SuppressFinalize(this);
		}
		
		/// <summary>
		/// Destructor
		/// </summary>
		~ClientBase() 
		{
			Dispose(false);
		}
	}

	/// <summary>
	/// Helper class to access all clients at once
	/// </summary>
	public partial class WebApiClients
	{
		public AccountClient Account { get; private set; }
		public AdminClient Admin { get; private set; }
		public DraftClient Draft { get; private set; }
		public MailClient Mail { get; private set; }
		public TestClient Test { get; private set; }
		
        protected IEnumerable<Interfaces.IClientBase> Clients
        {
            get
            {
				yield return Account;
				yield return Admin;
				yield return Draft;
				yield return Mail;
				yield return Test;
            }
        }

		public WebApiClients(Uri baseAddress = null)
		{
            if (baseAddress != null)
                Configuration.MyWebApiProxyBaseAddress = baseAddress.AbsoluteUri;

			Account = new AccountClient();
			Admin = new AdminClient();
			Draft = new DraftClient();
			Mail = new MailClient();
			Test = new TestClient();
		}

        public void SetAuthentication(AuthenticationHeaderValue auth)
        {
            foreach (var client in Clients)
                client.HttpClient.DefaultRequestHeaders.Authorization = auth;
        }
		
        protected virtual void Dispose(bool disposing)
        {
            if (disposing)
            {
                foreach (var client in Clients)
                    client.Dispose();
            }
        }

        public void Dispose()
        {
            Dispose(true);
            GC.SuppressFinalize(this);
        }

		~WebApiClients() 
		{
            Dispose(false);
		}
	}

	/// <summary>
	/// 
	/// </summary>
	public partial class AccountClient : ClientBase, Interfaces.IAccountClient
	{		

		/// <summary>
		/// 
		/// </summary>
		public AccountClient() : base()
		{
		}

		/// <summary>
		/// 
		/// </summary>
		public AccountClient(HttpMessageHandler handler, bool disposeHandler = true) : base(handler, disposeHandler)
		{
		}

		#region Methods

		/// <summary>
		/// 
		/// </summary>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> GetClientsAsyncMsg()
		{
			return await HttpClient.GetAsync("account/clients");
		}

		/// <summary>
		/// 
		/// </summary>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> GetClientsAsync()
		{
			return await HttpClient.GetAsync("account/clients");
		}

		/// <summary>
		/// 
		/// </summary>
		public virtual IReadOnlyCollection<ClientDescription> GetClients()
		{
			var result = Task.Run(() => GetClientsAsyncMsg()).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<IReadOnlyCollection<ClientDescription>>().Result;
			 		}

		#endregion
	}
	/// <summary>
	/// 
	/// </summary>
	public partial class AdminClient : ClientBase, Interfaces.IAdminClient
	{		

		/// <summary>
		/// 
		/// </summary>
		public AdminClient() : base()
		{
		}

		/// <summary>
		/// 
		/// </summary>
		public AdminClient(HttpMessageHandler handler, bool disposeHandler = true) : base(handler, disposeHandler)
		{
		}

		#region Methods

		/// <summary>
		/// 
		/// </summary>
		/// <param name="search"></param>
		/// <param name="take"></param>
		/// <param name="skip"></param>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> SearchAccountsAsyncMsg(String search,Int32 take,Int32 skip)
		{
			return await HttpClient.GetAsync("admin/list?search=" + search + "&take=" + take + "&skip=" + skip);
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="search"></param>
		/// <param name="take"></param>
		/// <param name="skip"></param>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> SearchAccountsAsync(String search,Int32 take,Int32 skip)
		{
			return await HttpClient.GetAsync("admin/list?search=" + search + "&take=" + take + "&skip=" + skip);
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="search"></param>
		/// <param name="take"></param>
		/// <param name="skip"></param>
		public virtual IReadOnlyCollection<AccountListModel> SearchAccounts(String search,Int32 take,Int32 skip)
		{
			var result = Task.Run(() => SearchAccountsAsyncMsg(search, take, skip)).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<IReadOnlyCollection<AccountListModel>>().Result;
			 		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="search"></param>
		/// <param name="take"></param>
		/// <param name="skip"></param>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> GetCountAsyncMsg(String search,Int32 take,Int32 skip)
		{
			return await HttpClient.GetAsync("admin/count?search=" + search + "&take=" + take + "&skip=" + skip);
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="search"></param>
		/// <param name="take"></param>
		/// <param name="skip"></param>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> GetCountAsync(String search,Int32 take,Int32 skip)
		{
			return await HttpClient.GetAsync("admin/count?search=" + search + "&take=" + take + "&skip=" + skip);
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="search"></param>
		/// <param name="take"></param>
		/// <param name="skip"></param>
		public virtual GetCountModel GetCount(String search,Int32 take,Int32 skip)
		{
			var result = Task.Run(() => GetCountAsyncMsg(search, take, skip)).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<GetCountModel>().Result;
			 		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="account_id"></param>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> GetAccountAsyncMsg(String account_id)
		{
			return await HttpClient.GetAsync("admin/by_id/" + account_id);
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="account_id"></param>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> GetAccountAsync(String account_id)
		{
			return await HttpClient.GetAsync("admin/by_id/" + account_id);
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="account_id"></param>
		public virtual AccountDetailModel GetAccount(String account_id)
		{
			var result = Task.Run(() => GetAccountAsyncMsg(account_id)).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<AccountDetailModel>().Result;
			 		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="name"></param>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> GetAccountByNameAsyncMsg(String name)
		{
			return await HttpClient.GetAsync("admin/by_name/" + name);
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="name"></param>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> GetAccountByNameAsync(String name)
		{
			return await HttpClient.GetAsync("admin/by_name/" + name);
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="name"></param>
		public virtual AccountDetailModel GetAccountByName(String name)
		{
			var result = Task.Run(() => GetAccountByNameAsyncMsg(name)).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<AccountDetailModel>().Result;
			 		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="model"></param>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> CreateAccountAsyncMsg(CreateAccountModel model)
		{
			return await HttpClient.PostAsJsonAsync<CreateAccountModel>("admin", model);
		}

		/// <summary>
		/// 
		/// </summary>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> CreateAccountAsync(CreateAccountModel model)
		{
			return await HttpClient.PostAsJsonAsync<CreateAccountModel>("admin", model);
		}

		/// <summary>
		/// 
		/// </summary>
		public virtual AccountDetailModel CreateAccount(CreateAccountModel model)
		{
			var result = Task.Run(() => CreateAccountAsyncMsg(model)).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<AccountDetailModel>().Result;
			 		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="account_id"></param>
		/// <param name="model"></param>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> AddAliasAsyncMsg(String account_id,AccountAlias model)
		{
			return await HttpClient.PostAsJsonAsync<AccountAlias>("admin/by_id/" + account_id + "/alias", model);
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="account_id"></param>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> AddAliasAsync(String account_id,AccountAlias model)
		{
			return await HttpClient.PostAsJsonAsync<AccountAlias>("admin/by_id/" + account_id + "/alias", model);
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="account_id"></param>
		public virtual void AddAlias(String account_id,AccountAlias model)
		{
			var result = Task.Run(() => AddAliasAsyncMsg(account_id, model)).Result;		 
			 
			EnsureSuccess(result);
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="account_id"></param>
		/// <param name="model"></param>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> RemoveAliasAsyncMsg(String account_id,AccountAlias model)
		{
			return await HttpClient.DeleteAsync("admin/by_id/" + account_id + "/alias");
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="account_id"></param>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> RemoveAliasAsync(String account_id,AccountAlias model)
		{
			return await HttpClient.DeleteAsync("admin/by_id/" + account_id + "/alias");
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="account_id"></param>
		public virtual void RemoveAlias(String account_id,AccountAlias model)
		{
			var result = Task.Run(() => RemoveAliasAsyncMsg(account_id, model)).Result;		 
			 
			EnsureSuccess(result);
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="account_id"></param>
		/// <param name="model"></param>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> SetPasswordAsyncMsg(String account_id,SetAccountStatusModel model)
		{
			return await HttpClient.PostAsJsonAsync<SetAccountStatusModel>("admin/by_id/" + account_id + "/status", model);
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="account_id"></param>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> SetPasswordAsync(String account_id,SetAccountStatusModel model)
		{
			return await HttpClient.PostAsJsonAsync<SetAccountStatusModel>("admin/by_id/" + account_id + "/status", model);
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="account_id"></param>
		public virtual void SetPassword(String account_id,SetAccountStatusModel model)
		{
			var result = Task.Run(() => SetPasswordAsyncMsg(account_id, model)).Result;		 
			 
			EnsureSuccess(result);
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="account_id"></param>
		/// <param name="model"></param>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> SetPasswordAsyncMsg(String account_id,SetPasswordModel model)
		{
			return await HttpClient.PostAsJsonAsync<SetPasswordModel>("admin/by_id/" + account_id + "/password", model);
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="account_id"></param>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> SetPasswordAsync(String account_id,SetPasswordModel model)
		{
			return await HttpClient.PostAsJsonAsync<SetPasswordModel>("admin/by_id/" + account_id + "/password", model);
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="account_id"></param>
		public virtual void SetPassword(String account_id,SetPasswordModel model)
		{
			var result = Task.Run(() => SetPasswordAsyncMsg(account_id, model)).Result;		 
			 
			EnsureSuccess(result);
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="account_id"></param>
		/// <param name="model"></param>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> SetForwardingListAsyncMsg(String account_id,SetForwardingListModel model)
		{
			return await HttpClient.PostAsJsonAsync<SetForwardingListModel>("admin/by_id/" + account_id + "/forwarding", model);
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="account_id"></param>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> SetForwardingListAsync(String account_id,SetForwardingListModel model)
		{
			return await HttpClient.PostAsJsonAsync<SetForwardingListModel>("admin/by_id/" + account_id + "/forwarding", model);
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="account_id"></param>
		public virtual void SetForwardingList(String account_id,SetForwardingListModel model)
		{
			var result = Task.Run(() => SetForwardingListAsyncMsg(account_id, model)).Result;		 
			 
			EnsureSuccess(result);
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="account_id"></param>
		/// <param name="model"></param>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> SetNameAsyncMsg(String account_id,SetNameModel model)
		{
			return await HttpClient.PostAsJsonAsync<SetNameModel>("admin/by_id/" + account_id + "/name", model);
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="account_id"></param>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> SetNameAsync(String account_id,SetNameModel model)
		{
			return await HttpClient.PostAsJsonAsync<SetNameModel>("admin/by_id/" + account_id + "/name", model);
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="account_id"></param>
		public virtual void SetName(String account_id,SetNameModel model)
		{
			var result = Task.Run(() => SetNameAsyncMsg(account_id, model)).Result;		 
			 
			EnsureSuccess(result);
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="account_id"></param>
		/// <param name="model"></param>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> SetQuotaAsyncMsg(String account_id,SetQuotaModel model)
		{
			return await HttpClient.PostAsJsonAsync<SetQuotaModel>("admin/by_id/" + account_id + "/quota", model);
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="account_id"></param>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> SetQuotaAsync(String account_id,SetQuotaModel model)
		{
			return await HttpClient.PostAsJsonAsync<SetQuotaModel>("admin/by_id/" + account_id + "/quota", model);
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="account_id"></param>
		public virtual void SetQuota(String account_id,SetQuotaModel model)
		{
			var result = Task.Run(() => SetQuotaAsyncMsg(account_id, model)).Result;		 
			 
			EnsureSuccess(result);
		}

		#endregion
	}
	/// <summary>
	/// 
	/// </summary>
	public partial class DraftClient : ClientBase, Interfaces.IDraftClient
	{		

		/// <summary>
		/// 
		/// </summary>
		public DraftClient() : base()
		{
		}

		/// <summary>
		/// 
		/// </summary>
		public DraftClient(HttpMessageHandler handler, bool disposeHandler = true) : base(handler, disposeHandler)
		{
		}

		#region Methods

		/// <summary>
		/// 
		/// </summary>
		/// <param name="client_id"></param>
		/// <param name="search"></param>
		/// <param name="take"></param>
		/// <param name="skip"></param>
		/// <param name="sended"></param>
		/// <param name="deleted"></param>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> SearchMessagesAsyncMsg(Int32 client_id,String search,Int32 take,Int32 skip,Nullable<Boolean> sended,Nullable<Boolean> deleted)
		{
			return await HttpClient.GetAsync("draft/" + client_id + "/list?search=" + search + "&take=" + take + "&skip=" + skip + "&sended=" + sended + "&deleted=" + deleted);
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="client_id"></param>
		/// <param name="search"></param>
		/// <param name="take"></param>
		/// <param name="skip"></param>
		/// <param name="sended"></param>
		/// <param name="deleted"></param>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> SearchMessagesAsync(Int32 client_id,String search,Int32 take,Int32 skip,Nullable<Boolean> sended,Nullable<Boolean> deleted)
		{
			return await HttpClient.GetAsync("draft/" + client_id + "/list?search=" + search + "&take=" + take + "&skip=" + skip + "&sended=" + sended + "&deleted=" + deleted);
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="client_id"></param>
		/// <param name="search"></param>
		/// <param name="take"></param>
		/// <param name="skip"></param>
		/// <param name="sended"></param>
		/// <param name="deleted"></param>
		public virtual PageResult<MailMessageListModel> SearchMessages(Int32 client_id,String search,Int32 take,Int32 skip,Nullable<Boolean> sended,Nullable<Boolean> deleted)
		{
			var result = Task.Run(() => SearchMessagesAsyncMsg(client_id, search, take, skip, sended, deleted)).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<PageResult<MailMessageListModel>>().Result;
			 		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="client_id"></param>
		/// <param name="model"></param>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> CreateMessageAsyncMsg(Int32 client_id,SaveMessageModel model)
		{
			return await HttpClient.PostAsJsonAsync<SaveMessageModel>("draft/" + client_id, model);
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="client_id"></param>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> CreateMessageAsync(Int32 client_id,SaveMessageModel model)
		{
			return await HttpClient.PostAsJsonAsync<SaveMessageModel>("draft/" + client_id, model);
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="client_id"></param>
		public virtual SaveMessageResultModel CreateMessage(Int32 client_id,SaveMessageModel model)
		{
			var result = Task.Run(() => CreateMessageAsyncMsg(client_id, model)).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<SaveMessageResultModel>().Result;
			 		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="client_id"></param>
		/// <param name="unique_id"></param>
		/// <param name="model"></param>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> EditMessageAsyncMsg(Int32 client_id,Int64 unique_id,SaveMessageModel model)
		{
			return await HttpClient.PutAsJsonAsync<SaveMessageModel>("draft/" + client_id + "/" + unique_id, model);
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="client_id"></param>
		/// <param name="unique_id"></param>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> EditMessageAsync(Int32 client_id,Int64 unique_id,SaveMessageModel model)
		{
			return await HttpClient.PutAsJsonAsync<SaveMessageModel>("draft/" + client_id + "/" + unique_id, model);
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="client_id"></param>
		/// <param name="unique_id"></param>
		public virtual SaveMessageResultModel EditMessage(Int32 client_id,Int64 unique_id,SaveMessageModel model)
		{
			var result = Task.Run(() => EditMessageAsyncMsg(client_id, unique_id, model)).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<SaveMessageResultModel>().Result;
			 		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="client_id"></param>
		/// <param name="unique_id"></param>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> SendAsyncMsg(Int32 client_id,Int64 unique_id)
		{
			return await HttpClient.PostAsJsonAsync("draft/" + client_id + "/send/" + unique_id, default(HttpResponseMessage));
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="client_id"></param>
		/// <param name="unique_id"></param>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> SendAsync(Int32 client_id,Int64 unique_id)
		{
			return await HttpClient.PostAsJsonAsync("draft/" + client_id + "/send/" + unique_id, default(HttpResponseMessage));
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="client_id"></param>
		/// <param name="unique_id"></param>
		public virtual void Send(Int32 client_id,Int64 unique_id)
		{
			var result = Task.Run(() => SendAsyncMsg(client_id, unique_id)).Result;		 
			 
			EnsureSuccess(result);
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="client_id"></param>
		/// <param name="unique_id"></param>
		/// <param name="file_id"></param>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> GetAttachmentAsyncMsg(Int32 client_id,Int64 unique_id,String file_id)
		{
			return await HttpClient.GetAsync("draft/" + client_id + "/file/" + unique_id + "/" + file_id);
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="client_id"></param>
		/// <param name="unique_id"></param>
		/// <param name="file_id"></param>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> GetAttachmentAsync(Int32 client_id,Int64 unique_id,String file_id)
		{
			return await HttpClient.GetAsync("draft/" + client_id + "/file/" + unique_id + "/" + file_id);
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="client_id"></param>
		/// <param name="unique_id"></param>
		/// <param name="file_id"></param>
		public virtual HttpResponseMessage GetAttachment(Int32 client_id,Int64 unique_id,String file_id)
		{
			var result = Task.Run(() => GetAttachmentAsyncMsg(client_id, unique_id, file_id)).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<HttpResponseMessage>().Result;
			 		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="client_id"></param>
		/// <param name="model"></param>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> DeleteAsyncMsg(Int32 client_id,MailActionModel<Boolean> model)
		{
			return await HttpClient.PostAsJsonAsync<MailActionModel<Boolean>>("draft/" + client_id + "/delete", model);
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="client_id"></param>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> DeleteAsync(Int32 client_id,MailActionModel<Boolean> model)
		{
			return await HttpClient.PostAsJsonAsync<MailActionModel<Boolean>>("draft/" + client_id + "/delete", model);
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="client_id"></param>
		public virtual void Delete(Int32 client_id,MailActionModel<Boolean> model)
		{
			var result = Task.Run(() => DeleteAsyncMsg(client_id, model)).Result;		 
			 
			EnsureSuccess(result);
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="client_id"></param>
		/// <param name="unique_id"></param>
		/// <param name="file_id"></param>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> RemoveAttachmentAsyncMsg(Int32 client_id,Int64 unique_id,String file_id)
		{
			return await HttpClient.DeleteAsync("draft/" + client_id + "/file/" + unique_id + "/" + file_id);
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="client_id"></param>
		/// <param name="unique_id"></param>
		/// <param name="file_id"></param>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> RemoveAttachmentAsync(Int32 client_id,Int64 unique_id,String file_id)
		{
			return await HttpClient.DeleteAsync("draft/" + client_id + "/file/" + unique_id + "/" + file_id);
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="client_id"></param>
		/// <param name="unique_id"></param>
		/// <param name="file_id"></param>
		public virtual void RemoveAttachment(Int32 client_id,Int64 unique_id,String file_id)
		{
			var result = Task.Run(() => RemoveAttachmentAsyncMsg(client_id, unique_id, file_id)).Result;		 
			 
			EnsureSuccess(result);
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="client_id"></param>
		/// <param name="unique_id"></param>
		/// <param name="model"></param>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> LoadAttachmentAsyncMsg(Int32 client_id,Int64 unique_id,LoadAttachmentModel model)
		{
			return await HttpClient.PostAsJsonAsync<LoadAttachmentModel>("draft/" + client_id + "/file/load/" + unique_id, model);
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="client_id"></param>
		/// <param name="unique_id"></param>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> LoadAttachmentAsync(Int32 client_id,Int64 unique_id,LoadAttachmentModel model)
		{
			return await HttpClient.PostAsJsonAsync<LoadAttachmentModel>("draft/" + client_id + "/file/load/" + unique_id, model);
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="client_id"></param>
		/// <param name="unique_id"></param>
		public virtual MessageAttachmentModel LoadAttachment(Int32 client_id,Int64 unique_id,LoadAttachmentModel model)
		{
			var result = Task.Run(() => LoadAttachmentAsyncMsg(client_id, unique_id, model)).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<MessageAttachmentModel>().Result;
			 		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="client_id"></param>
		/// <param name="unique_id"></param>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> UploadAttachmentsAsyncMsg(Int32 client_id,Int64 unique_id)
		{
			return await HttpClient.PostAsJsonAsync("draft/" + client_id + "/file/" + unique_id, default(HttpResponseMessage));
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="client_id"></param>
		/// <param name="unique_id"></param>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> UploadAttachmentsAsync(Int32 client_id,Int64 unique_id)
		{
			return await HttpClient.PostAsJsonAsync("draft/" + client_id + "/file/" + unique_id, default(HttpResponseMessage));
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="client_id"></param>
		/// <param name="unique_id"></param>
		public virtual List<MessageAttachmentModel> UploadAttachments(Int32 client_id,Int64 unique_id)
		{
			var result = Task.Run(() => UploadAttachmentsAsyncMsg(client_id, unique_id)).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<List<MessageAttachmentModel>>().Result;
			 		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="client_id"></param>
		/// <param name="unique_id"></param>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> GetMessageAsyncMsg(Int32 client_id,Int64 unique_id)
		{
			return await HttpClient.GetAsync("draft/" + client_id + "/detail/" + unique_id);
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="client_id"></param>
		/// <param name="unique_id"></param>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> GetMessageAsync(Int32 client_id,Int64 unique_id)
		{
			return await HttpClient.GetAsync("draft/" + client_id + "/detail/" + unique_id);
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="client_id"></param>
		/// <param name="unique_id"></param>
		public virtual MailMessageDetailModel GetMessage(Int32 client_id,Int64 unique_id)
		{
			var result = Task.Run(() => GetMessageAsyncMsg(client_id, unique_id)).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<MailMessageDetailModel>().Result;
			 		}

		#endregion
	}
	/// <summary>
	/// 
	/// </summary>
	public partial class MailClient : ClientBase, Interfaces.IMailClient
	{		

		/// <summary>
		/// 
		/// </summary>
		public MailClient() : base()
		{
		}

		/// <summary>
		/// 
		/// </summary>
		public MailClient(HttpMessageHandler handler, bool disposeHandler = true) : base(handler, disposeHandler)
		{
		}

		#region Methods

		/// <summary>
		/// 
		/// </summary>
		/// <param name="client_id"></param>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> GetFolderListAsyncMsg(Int32 client_id)
		{
			return await HttpClient.GetAsync("mail/" + client_id + "/folders");
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="client_id"></param>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> GetFolderListAsync(Int32 client_id)
		{
			return await HttpClient.GetAsync("mail/" + client_id + "/folders");
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="client_id"></param>
		public virtual IReadOnlyCollection<MailFolderModel> GetFolderList(Int32 client_id)
		{
			var result = Task.Run(() => GetFolderListAsyncMsg(client_id)).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<IReadOnlyCollection<MailFolderModel>>().Result;
			 		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="client_id"></param>
		/// <param name="folder_id"></param>
		/// <param name="search"></param>
		/// <param name="take"></param>
		/// <param name="skip"></param>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> SearchMessagesAsyncMsg(Int32 client_id,String folder_id,String search,Int32 take,Int32 skip)
		{
			return await HttpClient.GetAsync("mail/" + client_id + "/list/" + folder_id + "?search=" + search + "&take=" + take + "&skip=" + skip);
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="client_id"></param>
		/// <param name="folder_id"></param>
		/// <param name="search"></param>
		/// <param name="take"></param>
		/// <param name="skip"></param>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> SearchMessagesAsync(Int32 client_id,String folder_id,String search,Int32 take,Int32 skip)
		{
			return await HttpClient.GetAsync("mail/" + client_id + "/list/" + folder_id + "?search=" + search + "&take=" + take + "&skip=" + skip);
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="client_id"></param>
		/// <param name="folder_id"></param>
		/// <param name="search"></param>
		/// <param name="take"></param>
		/// <param name="skip"></param>
		public virtual PageResult<MailMessageListModel> SearchMessages(Int32 client_id,String folder_id,String search,Int32 take,Int32 skip)
		{
			var result = Task.Run(() => SearchMessagesAsyncMsg(client_id, folder_id, search, take, skip)).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<PageResult<MailMessageListModel>>().Result;
			 		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="client_id"></param>
		/// <param name="folder_id"></param>
		/// <param name="model"></param>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> MakeReadAsyncMsg(Int32 client_id,String folder_id,MailActionModel<Boolean> model)
		{
			return await HttpClient.PostAsJsonAsync<MailActionModel<Boolean>>("mail/" + client_id + "/read/" + folder_id, model);
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="client_id"></param>
		/// <param name="folder_id"></param>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> MakeReadAsync(Int32 client_id,String folder_id,MailActionModel<Boolean> model)
		{
			return await HttpClient.PostAsJsonAsync<MailActionModel<Boolean>>("mail/" + client_id + "/read/" + folder_id, model);
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="client_id"></param>
		/// <param name="folder_id"></param>
		public virtual void MakeRead(Int32 client_id,String folder_id,MailActionModel<Boolean> model)
		{
			var result = Task.Run(() => MakeReadAsyncMsg(client_id, folder_id, model)).Result;		 
			 
			EnsureSuccess(result);
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="client_id"></param>
		/// <param name="folder_id"></param>
		/// <param name="model"></param>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> MakeFlagAsyncMsg(Int32 client_id,String folder_id,MailActionModel<Boolean> model)
		{
			return await HttpClient.PostAsJsonAsync<MailActionModel<Boolean>>("mail/" + client_id + "/flag/" + folder_id, model);
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="client_id"></param>
		/// <param name="folder_id"></param>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> MakeFlagAsync(Int32 client_id,String folder_id,MailActionModel<Boolean> model)
		{
			return await HttpClient.PostAsJsonAsync<MailActionModel<Boolean>>("mail/" + client_id + "/flag/" + folder_id, model);
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="client_id"></param>
		/// <param name="folder_id"></param>
		public virtual void MakeFlag(Int32 client_id,String folder_id,MailActionModel<Boolean> model)
		{
			var result = Task.Run(() => MakeFlagAsyncMsg(client_id, folder_id, model)).Result;		 
			 
			EnsureSuccess(result);
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="client_id"></param>
		/// <param name="folder_id"></param>
		/// <param name="model"></param>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> MoveAsyncMsg(Int32 client_id,String folder_id,MailActionModel<String> model)
		{
			return await HttpClient.PostAsJsonAsync<MailActionModel<String>>("mail/" + client_id + "/move/" + folder_id, model);
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="client_id"></param>
		/// <param name="folder_id"></param>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> MoveAsync(Int32 client_id,String folder_id,MailActionModel<String> model)
		{
			return await HttpClient.PostAsJsonAsync<MailActionModel<String>>("mail/" + client_id + "/move/" + folder_id, model);
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="client_id"></param>
		/// <param name="folder_id"></param>
		public virtual void Move(Int32 client_id,String folder_id,MailActionModel<String> model)
		{
			var result = Task.Run(() => MoveAsyncMsg(client_id, folder_id, model)).Result;		 
			 
			EnsureSuccess(result);
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="client_id"></param>
		/// <param name="folder_id"></param>
		/// <param name="unique_id"></param>
		/// <param name="file_id"></param>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> GetAttachmentAsyncMsg(Int32 client_id,String folder_id,Int64 unique_id,String file_id)
		{
			return await HttpClient.GetAsync("mail/" + client_id + "/file/" + folder_id + "/" + unique_id + "/" + file_id);
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="client_id"></param>
		/// <param name="folder_id"></param>
		/// <param name="unique_id"></param>
		/// <param name="file_id"></param>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> GetAttachmentAsync(Int32 client_id,String folder_id,Int64 unique_id,String file_id)
		{
			return await HttpClient.GetAsync("mail/" + client_id + "/file/" + folder_id + "/" + unique_id + "/" + file_id);
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="client_id"></param>
		/// <param name="folder_id"></param>
		/// <param name="unique_id"></param>
		/// <param name="file_id"></param>
		public virtual HttpResponseMessage GetAttachment(Int32 client_id,String folder_id,Int64 unique_id,String file_id)
		{
			var result = Task.Run(() => GetAttachmentAsyncMsg(client_id, folder_id, unique_id, file_id)).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<HttpResponseMessage>().Result;
			 		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="client_id"></param>
		/// <param name="folder_id"></param>
		/// <param name="unique_id"></param>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> GetMessageAsyncMsg(Int32 client_id,String folder_id,Int64 unique_id)
		{
			return await HttpClient.GetAsync("mail/" + client_id + "/detail/" + folder_id + "/" + unique_id);
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="client_id"></param>
		/// <param name="folder_id"></param>
		/// <param name="unique_id"></param>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> GetMessageAsync(Int32 client_id,String folder_id,Int64 unique_id)
		{
			return await HttpClient.GetAsync("mail/" + client_id + "/detail/" + folder_id + "/" + unique_id);
		}

		/// <summary>
		/// 
		/// </summary>
		/// <param name="client_id"></param>
		/// <param name="folder_id"></param>
		/// <param name="unique_id"></param>
		public virtual MailMessageDetailModel GetMessage(Int32 client_id,String folder_id,Int64 unique_id)
		{
			var result = Task.Run(() => GetMessageAsyncMsg(client_id, folder_id, unique_id)).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<MailMessageDetailModel>().Result;
			 		}

		#endregion
	}
	/// <summary>
	/// 
	/// </summary>
	public partial class TestClient : ClientBase, Interfaces.ITestClient
	{		

		/// <summary>
		/// 
		/// </summary>
		public TestClient() : base()
		{
		}

		/// <summary>
		/// 
		/// </summary>
		public TestClient(HttpMessageHandler handler, bool disposeHandler = true) : base(handler, disposeHandler)
		{
		}

		#region Methods

		/// <summary>
		/// 
		/// </summary>
		/// <returns></returns>
		protected virtual async Task<HttpResponseMessage> GetAsyncMsg()
		{
			return await HttpClient.GetAsync("test");
		}

		/// <summary>
		/// 
		/// </summary>
		/// <returns></returns>
		public virtual async Task<HttpResponseMessage> GetAsync()
		{
			return await HttpClient.GetAsync("test");
		}

		/// <summary>
		/// 
		/// </summary>
		public virtual HttpResponseMessage Get()
		{
			var result = Task.Run(() => GetAsyncMsg()).Result;		 
			 
			EnsureSuccess(result);
			 			 
			return result.Content.ReadAsAsync<HttpResponseMessage>().Result;
			 		}

		#endregion
	}
}
#endregion

