@model Dialog_WidgetViewModel

@using Base.UI.ViewModal

@{
    Type typeEntity = Model.ViewModelConfig.TypeEntity;
    Type typeservice = Model.ViewModelConfig.ServiceType;

    bool isExportImport = Type.Equals(typeservice, typeof(IExportImportObject));
    bool isImportExcel = Type.Equals(typeservice, typeof(CorpProp.Services.Import.IImportHistoryService));
   
    bool isHistorical = (
        !Model.Mnemonic.Contains("association_")
        && Model.Type != TypeDialog.Lookup
        && Model.Type != TypeDialog.Modal
        && typeservice != null && typeservice.GetInterfaces().Contains(typeof(CorpProp.Common.IHistory)));
    bool isDictObject = Type.Equals(typeEntity, typeof(CorpProp.Entities.Base.DictObject)) || typeEntity.IsSubclassOf(typeof(CorpProp.Entities.Base.DictObject));
    bool isCategorizedItem = typeEntity.GetInterfaces().Contains(typeof(ICategorizedItem));
    bool isTreeObject = typeEntity.GetInterfaces().Contains(typeof(ITreeObject));
    bool isAccountingObject = Type.Equals(typeEntity, typeof(CorpProp.Entities.Accounting.AccountingObject)) || Type.Equals(typeEntity, typeof(CorpProp.Entities.Estate.PropertyComplex));
    bool isEstateObject = Type.Equals(typeEntity, typeof(CorpProp.Entities.Estate.Estate)) || typeEntity.IsSubclassOf(typeof(CorpProp.Entities.Estate.Estate));
    bool isNCAItem = Type.Equals(typeEntity, typeof(CorpProp.Entities.Asset.NonCoreAssetAndList));

    bool isUpdRightInCorpProp = Model.Mnemonic == "CheckboxRights";

    string nameToolbar = Html.CreateSystemName("toolbar");
    string btnToggleTreeId = Html.CreateSystemName("toggle_tree");
    string btnAddId = Html.CreateSystemName("add");
    string btnEditId = Html.CreateSystemName("edit");
    string btnMultiEditId = Html.CreateSystemName("multiedit");
    string btnExcelExportId = Html.CreateSystemName("excelexport");
    string btnLinkId = Html.CreateSystemName("link");
    string btnUnlinkId = Html.CreateSystemName("unlink");
    string btnDeleteId = Html.CreateSystemName("delete");
    string btnChangeCatId = Html.CreateSystemName("change_cat");
    string btnSettings = Html.CreateSystemName("settings");
    string btnExportExcel = Html.CreateSystemName("export_excel");
    string btnExportPdf = Html.CreateSystemName("export_pdf");
    string btnExportXML = Html.CreateSystemName("export_xml");
    string cbRecursiveViewId = Html.CreateSystemName("recursive_view");
    string btnImport = Html.CreateSystemName("import");
    string btnImportExcel = Html.CreateSystemName("importExcel");
    string btnImportXml = Html.CreateSystemName("importXml");
    string btnAddRoot = Html.CreateSystemName("add_root");
    string btnCreateFromTemplate = Html.CreateSystemName("create_from_template");
    string btnCreateScheduleState = Html.CreateSystemName("create_schedule_state");
    string btnAddAccountingObject = Html.CreateSystemName("add_accounting_object");
    string btnCreateNonCoreAsset = Html.CreateSystemName("create_noncoreasset");
    string btnChangeNCAStatus = Html.CreateSystemName("change_ncastatus");
    string btnCreateEstateAppraisal = Html.CreateSystemName("create_estateappraisal");

    string btnExchangeRateFile = Html.CreateSystemName("btnExchangeRateFile");
    string btnNonCoreAsset = Html.CreateSystemName("btnNonCoreAsset");

    string filtersDropdown = Html.CreateSystemName("filtersDropdown");
    string filtersDropdownLabelId = Html.CreateSystemName("filtersDropdownLabelId");
    string btnExtendedFilters = Html.CreateSystemName("extended_filters");
    string btnClearFilters = Html.CreateSystemName("clear_filters");

    string btnClearSort = Html.CreateSystemName("clear_sort");
    string searchboxId = Html.CreateSystemName("searchbox");
    string historyDateId = Html.CreateSystemName("historyDateId");
    string historyCheckboxId = Html.CreateSystemName("historyCheckboxId");
    string allItemsCheckboxId = Html.CreateSystemName("allItemsCheckboxId");

    string btnExpandGroup = Html.CreateSystemName("group_expand");
    string btnCollapseGroup = Html.CreateSystemName("group_collapse");
    string btnAddInComplex = Html.CreateSystemName("addInComplex");
    string btnUpdRightInCorpProp = Html.CreateSystemName("updRightInCorpProp");

    bool actionCreate = !Model.IsReadOnly && Model.IsPermission(TypePermission.Create) && Model.ViewModelConfig.ListView.VisibleAction(LvAction.Create);
    bool actionEdit = !Model.IsReadOnly && Model.IsPermission(TypePermission.Write) && Model.ViewModelConfig.ListView.VisibleAction(LvAction.Edit);
    bool actionMultiEdit = (Model.MultiSelect || Model.ViewModelConfig.ListView.MultiSelect) && actionEdit;//Model.ViewModelConfig.ListView.VisibleAction(LvAction.MultiEdit) && actionEdit;
    bool actionLink = !Model.IsReadOnly && Model.IsPermission(TypePermission.Write) && Model.ViewModelConfig.ListView.VisibleAction(LvAction.Link);
    bool actionUnlink = !Model.IsReadOnly && Model.IsPermission(TypePermission.Write) && Model.ViewModelConfig.ListView.VisibleAction(LvAction.Unlink);
    bool actionDelete = !Model.IsReadOnly && Model.IsPermission(TypePermission.Delete) && Model.ViewModelConfig.ListView.VisibleAction(LvAction.Delete);
    bool actionChangeCategory = isCategorizedItem && !Model.IsReadOnly && Model.IsPermission(TypePermission.Write) && Model.ViewModelConfig.ListView.VisibleAction(LvAction.ChangeCategory);
    bool actionAllCategorizedItems = isCategorizedItem && Model.ViewModelConfig.ListView.VisibleAction(LvAction.AllCategorizedItems);
    bool actionSettings = Model.ViewModelConfig.ListView.VisibleAction(LvAction.Settings);
    bool actionSearch = Model.ViewModelConfig.TypeEntity.IsFullTextSearchEnabled() && Model.ViewModelConfig.ListView.VisibleAction(LvAction.Search);
    bool actionExport = Model.ViewModelConfig.ListView.VisibleAction(LvAction.Export);
    bool actionImport = Model.ViewModelConfig.ListView.VisibleAction(LvAction.Import) && isExportImport;
    bool actionImportExcel = SibiAssemblyInfo.ShowImportAction && isImportExcel;
   
    bool actionCreateFromTemplate = (Model.Mnemonic == "SibTaskMenuList" || Model.Mnemonic == "SibTaskGantt" || Model.Mnemonic == "SibProjectMenuList");
    bool actionExpandCollapse =
        (Model.Preset is Base.UI.Presets.GridPreset && ((Base.UI.Presets.GridPreset)Model.Preset).Groupable) ||
        Model.ViewModelConfig.ListView.DataSource.Groups.Any();
    bool actionAddInComplex =
        Model.Mnemonic.Contains("MenuList")
        && (Type.Equals(Model.ViewModelConfig.TypeEntity, typeof(CorpProp.Entities.Estate.InventoryObject))
        || Model.ViewModelConfig.TypeEntity.IsSubclassOf(typeof(CorpProp.Entities.Estate.InventoryObject)));
    bool actionExchangeRate = Model.Mnemonic == "ExchangeRate";
    bool actionNonCoreAsset = Model.Mnemonic == "NonCoreAsset";
    bool actionSendTaskReport = Model.ViewModelConfig.Mnemonic == "SibTaskReport";
    bool actionUpdRightInCorpProp = Model.Mnemonic == "CheckboxExtractRights";
    bool actionAddAccountingObject = Type.Equals(Model.ViewModelConfig.TypeEntity, typeof(CorpProp.Entities.Law.ScheduleStateRegistrationRecord)) || Type.Equals(Model.ViewModelConfig.TypeEntity, typeof(CorpProp.Entities.Law.ScheduleStateTerminateRecord));
    bool actionCreateEstateAppraisal = Type.Equals(Model.ViewModelConfig.TypeEntity, typeof(CorpProp.Entities.CorporateGovernance.EstateAppraisal));




    string hotkeysId = Html.CreateSystemName("hotkeys");
    var hotkeysInfoId = Html.CreateSystemName("grid_keys_");
    var hotKeyList = Html.CreateSystemName("grid_hotlst_");
        }

<script>
    window["@nameToolbar"] = new WrapToolbar("@nameToolbar", "ToolbarListView");

        (function () {

        var composite = window["@Model.DialogID"];

        var toolbar = window["@nameToolbar"];

        composite.registerWidget(toolbar);

        toolbar.listViewSelectedObject = null;

        toolbar.refreshListView = function () {
            composite.onWidgetChanged(
                {
                sender: toolbar,
                    event: "refresh",
                    params: {}
        });
        };
    toolbar.containsIk = function (e) {
        var res = false;
        var fgrid = e.sender;
        var items = fgrid.getSelectItems();
        if (items) {
            res = true;
            items.forEach(function (item, i, items) {
                if (item.PropertyComplex != null || item.PropertyComplexID != null)
                    res=  false;
            });
        }
        return res;
    };

    toolbar.__overrideOnNeighbourWidgetChanged = toolbar.onNeighbourWidgetChanged;

        toolbar.onNeighbourWidgetChanged = function (e) {

        toolbar.__overrideOnNeighbourWidgetChanged(e);

        if (e.sender.desc === 'GridView'){
            if (e.event === "select" || e.event === "onDataBound") {
                if (!toolbar.widget()) return;

                if (e.event === "select")
                        toolbar.listViewSelectedObject = e.params.dataItem;
                    else toolbar.listViewSelectedObject = null;

                var isSelected = toolbar.listViewSelectedObject != null;

                var isSelectNode = true;

                var selectedContainsIK = toolbar.containsIk(e);


                @if (actionCreate)
                    {
                        @: toolbar.enable("#@btnAddId", isSelectNode);
                    }
					@if (actionLink)
                    {
                       @: toolbar.enable("#@btnLinkId", isSelectNode);
                    }

                   @if (actionUnlink)
                   {
                      @: toolbar.enable("#@btnUnlinkId", isSelectNode);
                   }

                    @if (actionEdit)
                    {
                        @: toolbar.enable("#@btnEditId", isSelected && isSelectNode);

                    }
                    else
                    {
                        @: toolbar.enable("#@btnEditId", isSelected && isSelectNode);
                    }

                    @if (actionDelete)
                    {
                        @: toolbar.enable("#@btnDeleteId", isSelected);
                    }

                    @if (actionImport)
                    {
                        @: toolbar.enable("#@btnImport");
                    }

					@if (actionCreateFromTemplate)
                    {
                       @: toolbar.enable("#@btnCreateFromTemplate");
                    }
					@if (actionExpandCollapse)
					{
                       @: toolbar.enable("#@btnCollapseGroup");
                    }
                    @if (actionExpandCollapse)
					{
                       @: toolbar.enable("#@btnExpandGroup");
                    }
					@if (actionAddInComplex)
					{
						@: toolbar.enable("#@btnAddInComplex", isSelected && isSelectNode && selectedContainsIK);
                    }
                    else
                    {
                       @: toolbar.enable("#@btnAddInComplex", isSelected && isSelectNode && selectedContainsIK);
                    }

                    @if (actionUpdRightInCorpProp)
					{
						@: toolbar.enable("#@btnUpdRightInCorpProp", isSelected);
                    }

                @if (actionCreateEstateAppraisal)
                {
                    @: toolbar.enable("#@btnCreateEstateAppraisal");
                }

                @if (isAccountingObject)
                {
                    @: toolbar.enable("#@btnCreateScheduleState");
                }




                toolbar.element().find("button[data-onlyForSelected=true]").each(function() {
                        $(this).data("kendoButton").enable(isSelected);
                });

                    if (e.event === "onDataBound") {
                        toolbar.element().find('#@searchboxId').find('.cancel-search').removeClass('k-loading')
                            .addClass('k-i-close');
                        toolbar.popupEl().find('#@searchboxId').find('.cancel-search').removeClass('k-loading')
                            .addClass('k-i-close');

                        var ds = e.sender.widget().dataSource;
                        var preset = e.sender.preset;
                        if (!ds.filter() || ds.filter().filters.length === 0) {

                            toolbar.enable("#@btnClearFilters", false);

                            toolbar.element()
                                .find("[data-action='clearFilters']")
                                .find(".btntoolbar").removeClass("animated tada");
                        } else {


                            toolbar.enable("#@btnClearFilters", true);

                            toolbar.element()
                                .find("[data-action='clearFilters']")
                                .find(".btntoolbar").addClass("animated tada");
                        }

                        var $toolbar = toolbar.element();
                        if (e.sender.preset && e.sender.preset.ExtendedFilterSettings) {
                            $toolbar.find("#@btnExtendedFilters").removeClass('hidden');
                            $toolbar.find("#@filtersDropdownLabelId").removeClass('hidden');
                            $toolbar.find("#@filtersDropdown").closest(".k-widget").removeClass('hidden');
                            $toolbar.find("#@btnClearFilters").addClass('hidden');
                        } else {
                            $toolbar.find("#@btnExtendedFilters").addClass('hidden');
                            $toolbar.find("#@filtersDropdownLabelId").addClass('hidden');
                            $toolbar.find("#@filtersDropdown").closest(".k-widget").addClass('hidden');
                            $toolbar.find("#@btnClearFilters").removeClass('hidden');
                        }

                        if (!ds.sort() || ds.sort().length === 0) {

                            toolbar.enable("#@btnClearSort", false);

                            toolbar.element()
                                .find("[data-action='clearSort']")
                                .find(".btntoolbar").removeClass("animated tada");

                        } else {
                            toolbar.enable("#@btnClearSort", true);
                            toolbar.element()
                                .find("[data-action='clearSort']")
                                .find(".btntoolbar").addClass("animated tada");
                        }

                    }

                } else if (e.event === "dblclick") {
                    //hack
                    if (composite.select) return;

                    var $btnEdit = $("#@btnEditId");

                    composite.onWidgetChanged(
                        {
                            sender: toolbar,
                            event: "click",
                            params: { action: "edit", row: e.row }
                        });
                }
            }

		};//end onNeighbourWidgetChanged


        toolbar.updateCategoryCheckbox = function () {
            if (toolbar.getCookie("@Model.Mnemonic", "allItems", "false") == "true") {
                toolbar.element().find("#@cbRecursiveViewId").attr('checked', 'checked');
            };
        };

        //events
        toolbar.onClick = function (e) {
            //console.log({
            //    event: e,
            //    action: e.target[0].dataset.action
            //});

            composite.onWidgetChanged(
                {
                    sender: toolbar,
                    event: "click",
                    params: {
                        event: e,
                        action: e.target[0].getAttribute("data-action")
                    }
                });
        };

        toolbar.searchBox_onClick = function (e) {
            if (e.str) {
                e.sender.find('.cancel-search').addClass('k-loading').removeClass('k-i-close');
            }

            composite.onWidgetChanged(
                {
                    sender: toolbar,
                    event: "search",
                    params: { str: e.str }
                });
        };

        toolbar.defaultHistory = function () {
            var elValue = $("#@historyDateId").find("input").val();

            composite.onWidgetChanged({
                sender: toolbar,
                event: "historySearch",
                params: { type: "date", value: elValue }
            })
        }

        toolbar.historySearch = function (e) {
            if ((e.value != undefined || e.value != null) && e.type) {
                if (e.type === "checkbox" && e.value == true) {
                    $("#@historyDateId").addClass("k-state-disabled");
                }
                else if (e.type === "checkbox" && e.value == false) {
                    var dateObj = new Date();
                    var todayString = dateObj.getDate().toString() + "." + (dateObj.getMonth() + 1).toString() + "." + dateObj.getFullYear().toString();
                    $("#@historyDateId").removeClass("k-state-disabled");
                    $("#@historyDateId").find("input").val(todayString);
                }
                composite.onWidgetChanged({
                    sender: toolbar,
                    event: "historySearch",
                    params: { type: e.type, value: e.value }
                })
            }
        }

        toolbar.showAllData = function (e) {
                composite.onWidgetChanged({
                    sender: toolbar,
                    event: "showAllData",
                    params: { state: e.checked }
                })
        }
    })();
</script>


@(Html.Kendo().ToolBar()
    .Name(nameToolbar)
        .Events(e => e.OverflowOpen(nameToolbar + ".onOverflowOpen"))
    .Items(items =>
    {
        if (isCategorizedItem)
        {
            items.Add().Type(CommandType.Button).Text("Отобразить / скрыть дерево")
                .SpriteCssClass("btntoolbar button-tree-collapse mdi mdi-chevron-left").Id(btnToggleTreeId)
                .HtmlAttributes(new { @class = "button-tree-collapse", data_action = "toggleTree" })
                .ShowText(ShowIn.Overflow).Click(nameToolbar + ".onClick");
            items.Add().Type(CommandType.Separator);
        }

        items.Add().Type(CommandType.ButtonGroup).Id("toolbarButtonGroupLink").Buttons(buttons =>
        {
            if (actionLink)
            {
                buttons.Add().Text("Связать").HtmlAttributes(new { title = "Связать", data_action = "link" }).SpriteCssClass("fa fa-plus-circle").Id(btnLinkId).ShowText(ShowIn.Overflow).Click(nameToolbar + ".onClick");
            }

            if (actionUnlink)
            {
                buttons.Add().Text("Отвязать").HtmlAttributes(new { title = "Отвязать", data_action = "unlink" }).SpriteCssClass("fa fa-minus-circle").Id(btnUnlinkId).ShowText(ShowIn.Overflow).Click(nameToolbar + ".onClick");
            }
        }).HtmlAttributes(new { @class = "hidden" });

        items.Add().Type(CommandType.ButtonGroup).Buttons(buttons =>
        {
            if (actionCreate)
            {
                if (isTreeObject)
                    buttons.Add().Text("Создать корневой").HtmlAttributes(new { title = "Создать корневой", data_action = "addRoot" }).SpriteCssClass("btntoolbar mdi mdi-folder-plus").Enable(actionCreate).Id(btnAddRoot).ShowText(ShowIn.Overflow).Click(nameToolbar + ".onClick");

                buttons.Add().Text("Создать").HtmlAttributes(new { title = "Создать", data_action = "add" }).SpriteCssClass("btntoolbar fa fa-plus").Enable(actionCreate).Id(btnAddId).ShowText(ShowIn.Overflow).Click(nameToolbar + ".onClick");

                if (actionCreateFromTemplate)
                    buttons.Add().Text("Создать из шаблона").HtmlAttributes(new { title = "Создать из шаблона", data_action = "createFromTemplate" }).SpriteCssClass("btntoolbar mdi mdi-window-open").Enable(actionCreate).Id(btnCreateFromTemplate).ShowText(ShowIn.Overflow).Click(nameToolbar + ".onClick");
            }

            if (Model.Type != TypeDialog.Frame)
            {
                if (actionAddAccountingObject)
                {
                    buttons.Add().Text("Добавить из ОБУ").HtmlAttributes(new { title = "Добавить из ОБУ" }).SpriteCssClass("btntoolbar fa fa-external-link").Hidden(true).Id("addAccountingObject").ShowText(ShowIn.Overflow);
                }
                if (actionLink)
                    buttons.Add().Text("Добавить связь").HtmlAttributes(new { title = "Добавить связь" }).SpriteCssClass("btntoolbar fa fa-chain").Hidden(true).Id("add_link").ShowText(ShowIn.Overflow);
                if (actionUnlink)
                    buttons.Add().Text("Удалить связь").HtmlAttributes(new { title = "Удалить связь" }).SpriteCssClass("btntoolbar fa fa-unlink").Hidden(true).Id("remove_link").ShowText(ShowIn.Overflow);
            }

            if (actionEdit)
            {
                buttons.Add().Text("Редактировать").HtmlAttributes(new { title = "Редактировать", data_action = "edit" }).SpriteCssClass("btntoolbar fa fa-pencil").Id(btnEditId).ShowText(ShowIn.Overflow).Click(nameToolbar + ".onClick");
            }
            else
            {
                buttons.Add().Text("Просмотр").HtmlAttributes(new { title = "Просмотр", data_action = "edit" }).SpriteCssClass("btntoolbar fa fa-eye").Id(btnEditId).ShowText(ShowIn.Overflow).Click(nameToolbar + ".onClick");
            }

            if (actionMultiEdit)
            {
                buttons.Add().Text("Множественное изменение").HtmlAttributes(new { title = "Множественное изменение", data_action = "multiedit" }).SpriteCssClass("btntoolbar fa fa-pencil-square-o").Id(btnMultiEditId).ShowText(ShowIn.Overflow).Click(nameToolbar + ".onClick");
            }


            if (actionDelete)
            {
                buttons.Add().Text("Удалить").HtmlAttributes(new { title = "Удалить", data_action = "delete" }).SpriteCssClass("btntoolbar fa fa-trash-o").Enable(actionDelete).Id(btnDeleteId).ShowText(ShowIn.Overflow).Click(nameToolbar + ".onClick");
            }

            if (actionChangeCategory && !isTreeObject)
            {
                buttons.Add().Text("Переместить в...").HtmlAttributes(new { title = "Переместить в...", data_action = "changeCategory" }).SpriteCssClass("btntoolbar fa fa-share-square-o").Id(btnChangeCatId).ShowText(ShowIn.Overflow).Click(nameToolbar + ".onClick");
            }

            if (isAccountingObject && Model.Type != TypeDialog.Modal)
            {
                buttons.Add().Text("Добавить в ГГР").HtmlAttributes(new { title = "Добавить в ГГР", data_action = "createScheduleState" }).SpriteCssClass("btntoolbar mdi mdi-archive").Id(btnCreateScheduleState).ShowText(ShowIn.Overflow).Click(nameToolbar + ".onClick");
            }

            if (actionCreateEstateAppraisal)
            {
                buttons.Add().Text("Содать из ОБУ").HtmlAttributes(new { title = "Содать из ОБУ", data_action = "createEstateAppraisal" }).SpriteCssClass("btntoolbar mdi mdi-archive").Id(btnCreateEstateAppraisal).ShowText(ShowIn.Overflow).Click(nameToolbar + ".onClick");
            }

            if (isEstateObject)
            {
                buttons.Add().Text("Отнести к ННА").HtmlAttributes(new { title = "Отнести к ННА", data_action = "createNonCoreAsset" }).SpriteCssClass("btntoolbar mdi mdi-archive").Id(btnCreateNonCoreAsset).ShowText(ShowIn.Overflow).Click(nameToolbar + ".onClick");
            }

            if (isNCAItem)
            {
                buttons.Add().Text("Изменить статус").HtmlAttributes(new { title = "Изменить статус", data_action = "changeNCAStatus" }).SpriteCssClass("btntoolbar mdi mdi-archive").Id(btnChangeNCAStatus).ShowText(ShowIn.Overflow).Click(nameToolbar + ".onClick");
            }

            if (actionImport)
            {
                buttons.Add().Text("Импорт JSON").HtmlAttributes(new { title = "Импорт JSON", data_action = "importJSON" }).SpriteCssClass("btntoolbar mdi mdi-code-braces").Id(btnImport).ShowText(ShowIn.Overflow).Click(nameToolbar + ".onClick");
            }
            if (actionImportExcel)
            {
                buttons.Add().Text("Импорт в АИС КС").HtmlAttributes(new { title = "Импорт в АИС КС", data_action = "importData" }).SpriteCssClass("btntoolbar mdi mdi-database-plus").Id(btnImportExcel).ShowText(ShowIn.Overflow).Click(nameToolbar + ".onClick");
            }
            //if (actionImportXml)
            //{
            //    buttons.Add().Text("Импорт из XML").HtmlAttributes(new { title = "Импорт из XML", data_action = "importXml" }).SpriteCssClass("btntoolbar mdi mdi-file-xml").Id(btnImportXml).ShowText(ShowIn.Overflow).Click(nameToolbar + ".onClick");
            //}
            if (actionExpandCollapse)
            {
                buttons.Add().Text("Свернуть группы").HtmlAttributes(new { title = "Свернуть группы", data_action = "collapseGroup" }).SpriteCssClass("btntoolbar fa fa-compress").Enable(actionExpandCollapse).Id(btnCollapseGroup).ShowText(ShowIn.Overflow).Click(nameToolbar + ".onClick");
                buttons.Add().Text("Развернуть группы").HtmlAttributes(new { title = "Развернуть группы", data_action = "expandGroup" }).SpriteCssClass("btntoolbar fa fa-expand").Enable(actionExpandCollapse).Id(btnExpandGroup).ShowText(ShowIn.Overflow).Click(nameToolbar + ".onClick");
            }
            if (actionAddInComplex)
            {
                buttons.Add()
                .Text("Добавить в ИК")
                .HtmlAttributes(new { title = "Добавить в ИК", data_action = "addInComplex" })
                .SpriteCssClass("btntoolbar fa fa-share-square-o")
                .Id(btnAddInComplex)
                .ShowText(ShowIn.Overflow)
                .Click(nameToolbar + ".onClick");

            }
            if (actionUpdRightInCorpProp)
            {
                buttons.Add()
                .Text("Обновить в реестре прав")
                .HtmlAttributes(new { title = "Обновить в реестре прав", data_action = "updRightInCorpProp" })
                .SpriteCssClass("btntoolbar fa fa-share-square-o")
                .Id(btnUpdRightInCorpProp)
                .ShowText(ShowIn.Overflow)
                .Click(nameToolbar + ".onClick");

            }

            //buttons.Add().Text("Выбор фильтра").HtmlAttributes(new { title = "Выбор фильтра", data_action = "extendedFilters" }).SpriteCssClass("btntoolbar fa fa-filter").Id(btnExtendedFilters).ShowText(ShowIn.Overflow).Click(nameToolbar + ".onClick");
            //buttons.Add().Text("Сбросить фильтры").HtmlAttributes(new { title = "Сбросить фильтры", data_action = "clearFilters" }).SpriteCssClass("btntoolbar mdi mdi-filter-remove").Id(btnClearFilters).ShowText(ShowIn.Overflow).Click(nameToolbar + ".onClick");

            items.Add().Type(CommandType.Separator);
            items.Add().Template($"<label for='{filtersDropdown}' id='{filtersDropdownLabelId}' class='hidden'><span class='fa fa-filter'></span>:</label>");
            items.Add().Template($"<input id='{filtersDropdown}' style='width: 150px;'  class='hidden'/>").Overflow(ShowInOverflowPopup.Never);
            items.Add().Type(CommandType.Button).Text("...").HtmlAttributes(new { @class = "hidden", title = "Открыть список представлений", data_action = "extendedFilters" }).SpriteCssClass("btntoolbar fa fa-list-ul").Id(btnExtendedFilters).ShowText(ShowIn.Overflow).Click(nameToolbar + ".onClick");
            items.Add().Type(CommandType.Button).Text("Сбросить фильтры").HtmlAttributes(new { @class = "hidden", title = "Сбросить фильтры", data_action = "clearFilters" }).SpriteCssClass("btntoolbar mdi mdi-filter-remove").Id(btnClearFilters).ShowText(ShowIn.Overflow).Click(nameToolbar + ".onClick");


            buttons.Add().Text("Сбросить сортировку").HtmlAttributes(new { title = "Сбросить сортировку", data_action = "clearSort" }).SpriteCssClass("btntoolbar k-i-unsort").Id(btnClearSort).ShowText(ShowIn.Overflow).Click(nameToolbar + ".onClick");

            if (actionSettings)
            {
                buttons.Add().Text("Настройка").HtmlAttributes(new { title = "Настройка", data_action = "settings" }).SpriteCssClass("btntoolbar fa fa-cog").Id(btnSettings).ShowText(ShowIn.Overflow).Click(nameToolbar + ".onClick");
            }
            buttons.Add().Id(hotkeysId).HtmlAttributes(new { @class = "hotkeys" }).SpriteCssClass("fa fa-keyboard-o").Togglable(false);
            if (actionExchangeRate)
            {
                buttons.Add().Text("Загрузить из файла").HtmlAttributes(new { title = "Загрузить из файла", data_action = "ExchangeRateFile" }).SpriteCssClass("btntoolbar fa fa-hdd-o").Id(btnExchangeRateFile).ShowText(ShowIn.Overflow).Click(nameToolbar + ".onClick");
            }
            if (actionNonCoreAsset)
            {
                buttons.Add().Text("Добавить в перечень").HtmlAttributes(new { title = "Добавить в перечень", data_action = "NonCoreAssetAdd" }).SpriteCssClass("btntoolbar fa fa-list-alt").Id(btnNonCoreAsset).ShowText(ShowIn.Overflow).Click(nameToolbar + ".onClick");
            }
        });

        if (actionAllCategorizedItems && !isTreeObject)
        {
            items.Add().Type(CommandType.Separator);

            items.Add().HtmlAttributes(new { @class = "k-button-group" })
                .Template(@"<div title='Рекурсивный просмотр'>
                    <input id='" + cbRecursiveViewId + "' type='checkbox' />" +
                    "</div>");
        }

        if (actionExport)
        {
            items.Add().Type(CommandType.Separator);

            items.Add().Type(CommandType.SplitButton).Text(" Excel").SpriteCssClass("k-icon mdi mdi-file-excel").HtmlAttributes(new { data_action = "exportExcel" }).Id(btnExportExcel).Click(nameToolbar + ".onClick").MenuButtons(menuButtons =>
            {
                menuButtons.Add().Text(" Excel").SpriteCssClass("mdi mdi-file-excel").HtmlAttributes(new { data_action = "exportExcel" }).Id(btnExportExcel);
                menuButtons.Add().Text(" Pdf").SpriteCssClass("mdi mdi-file-pdf").HtmlAttributes(new { data_action = "exportPfd" }).Id(btnExportPdf);
                menuButtons.Add().Text(" Xml").SpriteCssClass("mdi mdi-xml").HtmlAttributes(new { data_action = "exportXML" }).Id(btnExportXML);
            });

        }




        if (Model.ViewModelConfig.ListView.Toolbars.Count > 0)
        {
            items.Add().Type(CommandType.Separator);

            foreach (var toolbar in Model.ViewModelConfig.ListView.Toolbars)
            {
                items.Add().Template(Html.Action(toolbar.AjaxAction.Name, toolbar.AjaxAction.Controller, toolbar.AjaxAction.Params).ToHtmlString());
            }
        }

        if (actionSearch)
        {
            items.Add().Type(CommandType.Separator);

            items.Add().Template(
                        string.Format(@"<div id='{0}' class='k-button-group'>
                            <div class='search-tools'>
                                <input class='k-textbox' placeholder='Поиск' value='{1}'>
                                <span class='k-icon k-i-close cancel-search'></span>
                            </div>
                        </div>", searchboxId, Model.SearchStr))
                        .OverflowTemplate(
                        string.Format(@"
                            <div class='search-tools'>
                                <input class='k-textbox' placeholder='Поиск' value='{1}'>
                                <span class='k-icon k-i-close cancel-search'></span>
                            </div>
                        </div>", searchboxId, Model.SearchStr));
        }

        if (!isDictObject && Model.Type != TypeDialog.Modal)
        {
            items.Add().Type(CommandType.Separator);
            items.Add().Template(
                    $"<div class='search-tools tooltipstered' style='top:20px' id='{allItemsCheckboxId}'>{Html.Kendo().CheckBox().Name("allItemsCheckBox").Label("Все данные").ToHtmlString()}</div>"
                    ).OverflowTemplate(
                    $"<div class='search-tools tooltipstered' style='top:20px' id='{allItemsCheckboxId}'>{Html.Kendo().CheckBox().Name("allItemsCheckBox").Label("Все данные").ToHtmlString()}</div>"
                );
        }

        if (isHistorical)
        {
            items.Add().Type(CommandType.Separator);

            items.Add().Template(
                    $"<div class='search-tools tooltipstered' style='top:5px' id='{historyDateId}'>{ Html.Kendo().DatePicker().Name("historyDatePicker").ParseFormats(new List<string>() { JsonNetResult.DATE_FORMATE }).Format(JsonNetResult.DATE_FORMATE).Value(DateTime.Now.Date).DateInput(true).ToHtmlString()}</div>"
                    ).OverflowTemplate(
                    $"<div class='search-tools' style='top:5px' id='{historyDateId}'>{ Html.Kendo().DatePicker().Name("historyDatePicker").ParseFormats(new List<string>(){JsonNetResult.DATE_FORMATE}).Format(JsonNetResult.DATE_FORMATE).Value(DateTime.Now.Date).DateInput(true).ToHtmlString()}</div>"
                    );

            if (isDictObject)
            {
                items.Add().Template(
                    $"<div class='search-tools tooltipstered' style='top:20px' id='{historyCheckboxId}'>{Html.Kendo().CheckBox().Name("dictHistCheckBox").Label("Вся история").ToHtmlString()}</div>"
                    ).OverflowTemplate(
                    $"<div class='search-tools tooltipstered' style='top:20px' id='{historyCheckboxId}'>{Html.Kendo().CheckBox().Name("dictHistCheckBox").Label("Вся история").ToHtmlString()}</div>"
                );
            }
        }
    }
    )
)

<script>
    $(function () {
        var toolbar = window["@nameToolbar"];
        var $toolbar = toolbar.element();
        var composite = window["@Model.DialogID"];
        $toolbar.find("#@searchboxId").pbaSearchBox(toolbar.searchBox_onClick);
        toolbar.popupEl().find("#@searchboxId").pbaSearchBox(toolbar.searchBox_onClick);

        $toolbar.find("#@historyCheckboxId").pbaHistorySearch(toolbar.historySearch);
        toolbar.popupEl().find("#@historyCheckboxId").pbaHistorySearch(toolbar.historySearch);

        $toolbar.find("#@historyDateId").pbaHistorySearch(toolbar.historySearch);
        toolbar.popupEl().find("#@historyDateId").pbaHistorySearch(toolbar.historySearch);

        $toolbar.find("#@allItemsCheckboxId").pbaAllGridData(toolbar.showAllData);
        toolbar.popupEl().find("#@allItemsCheckboxId").pbaAllGridData(toolbar.showAllData);

        //NOTE: в данной версии toolbar-а возможно использовать иконки только из кендо-спрайтов
        //TODO: убрать!!!
        $toolbar.find(".k-sprite.fa").removeClass("k-sprite");
        toolbar.popupEl().find(".k-sprite.fa").removeClass("k-sprite");

        toolbar.enable("#@btnEditId", false);
        toolbar.enable("#@btnDeleteId", false);
        toolbar.enable("#@btnChangeCatId", false);

        $toolbar.find("#@hotkeysId").kendoTooltip({
            width: 320,
            position: "top",
            content: kendo.template($("#@hotkeysInfoId").html())
        }).data("kendoTooltip");

        toolbar.filtersDropdown = $toolbar.find('#@filtersDropdown').kendoDropDownList({
            optionLabel: "По умолчанию",
            dataTextField: "Title",
            dataValueField: "ID",
            dataSource: {
                transport: {
                    read: {
                        dataType: "json",
                        url: '@Url.Action("GetMnemonicFilters", "QueryBuilderFilter")',
                    }
                }
            },
            change: function () {
                var selectedItem = this.dataItem(this.select());
                var idValue = selectedItem.ID ? selectedItem.ID : null;

                composite.onWidgetChanged(
                {
                    sender: toolbar,
                    event: "changeExtendedFilter",
                    params: { idValue: idValue }
                });
            },
            template: '<div style="white-space: nowrap;overflow: hidden;" title="#:data.Title #"> #:data.Title #</div>',
            valueTemplate: '<span title="#:data.Title#">#:data.Title#</span>'
        }).data('kendoDropDownList');

    });
</script>

<div id="@hotkeysInfoId" type="text/x-kendo-template" style="display: none; background-color: #fefefe">
    <h5 class="hotkeys__header">Горячие клавиши</h5>
    <ul class="kwidget kwidget--list" id="@hotKeyList">
        <li class="hotkeys-row">
            <span class="key-button">Insert </span> <span class="key-text">- Создать объект</span>
        </li>
        <li class="hotkeys-row">
            <span class="key-button">Enter </span> <span class="key-text">- Редактировать объект</span>
        </li>
        <li class="hotkeys-row">
            <span class="key-button">Delete </span> <span class="key-text">- Удалить объект</span>
        </li>
        <li class="hotkeys-row">
            <span class="key-button">&#8593; </span>
            <span class="key-button">&#8595; </span>
            <span class="key-button">&#8592; </span>
            <span class="key-button">&#8594; </span> <span class="key-text">- Навигация по таблице</span>
        </li>
        <li class="hotkeys-row">
            <span class="key-button"> Space </span> <span class="key-text">- Выделить строку</span>
        </li>
    </ul>
</div>


@if (actionAllCategorizedItems)
{
    <script>
        $(function () {
            var toolbar = window["@nameToolbar"];
            var $tb = toolbar.element();

            if (toolbar.getCookie("@Model.Mnemonic", "allItems", "false") == "true") {
                $tb.find("#@cbRecursiveViewId").attr('checked', 'checked')
            };

            $tb.find('#@cbRecursiveViewId').kendoMobileSwitch({
                onLabel: '<span class="k-icon icon-hierarchy"></span>',
                offLabel: '<span class="k-icon icon-no-hierarchy"></span>',
                change: function (evt) {
                    toolbar.setCookie("@Model.Mnemonic", "allItems", evt.checked);
                    toolbar.refreshListView();
                }
            });
        });

    </script>
}